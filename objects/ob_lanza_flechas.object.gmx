<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_lanza_flechas</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>8</depth>
  <persistent>0</persistent>
  <parentName>parent_plat_solido</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicio de Atributos
{

    disparando = false; // Usado para cambiar temporalmente la imagen de este objeto al disparar

    /* El tiempo que en que la trampa irá disparando flechas por defecto y se llama una alarma donde reicién ahi se indica en cuanto tiempo se crean
    las flechas (por si se dio otro valor a una instancia en particular, debido a que eso se ejecuta luego de este evento)*/
    tiempo = 30;
    alarm[0] = 1; // Debe pasar al menos un step, para que lo puesto en el "creation code" de la instancia, tenga efecto.
    
    
    // Centro del objeto (se toma en cuenta su mascara de colisión que es fija en coordenadas por mas que se la gira)
    centro_x = bbox_left + ( (bbox_right - bbox_left) / 2 );
    centro_y = bbox_top + ( (bbox_bottom - bbox_top) / 2);
    
    // Se guarda el origen donde saldrá la flecha lanzada tomando en cuenta el angulo de rotación de la imagen y centro del objeto.
    flecha_origen_x = centro_x + lengthdir_x( 12, image_angle);
    flecha_origen_y = centro_y + lengthdir_y( 12, image_angle);
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cambio imagen de "no está disparando".
{

    disparando = false;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generación de flecha
{

    var flecha_creada;

    /* Si "cola_flechas" esta en cero, se crea una flecha (la misma al colisionar se agregaria a esa cola)...caso contrario, se usa la que este en la 
    cabeza.*/
    if( ds_queue_size( cola_flechas ) == 0 ){ 
    
        flecha_creada = instance_create( flecha_origen_x, flecha_origen_y, ob_flecha );       
        
    }
    else{
    
        flecha_creada = ds_queue_dequeue(cola_flechas);
        
        instance_activate_object( flecha_creada );
        
        with(flecha_creada){
        
            x = other.flecha_origen_x;
            y = other.flecha_origen_y;
        
        }
        
    }
    
    // Se cambian algunos atributos de la flecha tomando en cuenta el angulo de la imagen de la trampa y se le coloca una velocidad.
    with( flecha_creada ){
    
        var angulo_imagen_otro = other.image_angle;
        
        image_angle = angulo_imagen_otro;    
        
        speed = 6;
        direction = angulo_imagen_otro;
        
        // [Sonido] Se reproduce el sonido de lanzar la flecha si el jugador está cerca y si no se está reproduciendo el mismo.
        if( distance_to_object( ob_jug ) &lt; 50 ){
        
            if not( audio_is_playing( sn_flecha_lanzada ) ){ audio_play_sound( sn_flecha_lanzada, 1, false ); }    
        
        }
        
    }

    effect_create_above( ef_smoke, flecha_origen_x, flecha_origen_y, 0, c_gray ); // Efecto simple de humo cuando sale la flecha.
    
    // Se hace recursión con este evento.
    alarm[1] = tiempo;
         
    // Se cambia la imagen a una que señala que está disparando y se llama a una alarma para volver al estado normal.
    disparando = true;
    alarm[2] = 5;    
    
    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se asigna el tiempo para tirar flechas
{

    alarm[1] = tiempo;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control del sprite
{

    if( disparando == false ){ image_index = 0; }
    else{ image_index = 1; }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manejo del sprite

if( image_angle != 180 ){ draw_sprite_ext( sp_lanza_flechas, image_index, x, y, 1, 1, image_angle, c_white, 1); }
else{ draw_sprite_ext( sp_lanza_flechas, image_index, x, y - 32, 1, -1, image_angle, c_white, 1);  } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
