<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_chaman_activador</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicio atributos.

for( var i = 0; i &lt; 7; i++ ){ tipo_trampa[i] = false; }
/*
    0 = Flash pantalla
    1 = Temblor
    2 = Invocar media sierra horizontal
    3 = Invocar media sierra vertical
    4 = Invocar estalactitas comunes
    5 = Hacer caer estalactitas especiales (numeradas).
    6 = Invocar estalactitas que caen

*/
       

/* En el "creation code" de la instancia se tiene que llamar a la alarma cero en el caso que se usen tipo_trampa de 2 en adelante.  El orden de hacerse es el 
siguiente:

    **********************************
    tipo_trampa[i] = true
    
    Atributos a usar y valores a asignar
    
    ************************************                 

&lt;&lt;  Atributos especiales creados en alarm[0]    &gt;&gt;
    
        ---&gt; Sierras horizontales:
            
            sierra_h_cantidad
            sierra_h_x[i]
            sierra_h_y[i]
            sierra_h_velocidad[i]   ---&gt; + = derecha; - = izquierda
            sierra_h_reflejado[i]   ---&gt; 1 = normal; -1 = invertido verticlamente.
            
        ---&gt; Sierras verticales:
            
            sierra_v_cantidad
            sierra_v_x[i]
            sierra_v_y[i]
            sierra_v_velocidad[i]   ---&gt; + = arriba; - = abajo
            sierra_v_reflejado[i]   ---&gt; 1 = normal; -1 = invertido horizontalmente.
            

        ---&gt; Estalactitas comunes:
            
            estalactita_cantidad
            estalactita_x[i]
            estalactita_y[i]
            estalactita_cantidad_derecha[i]

        ---&gt; Hacer caer estalactitas especiales.
        
            estalactita_numero 

        ---&gt; Estalactitas que caen:
            
            estalactita_cantidad
            estalactita_x[i]
            estalactita_y[i]
            estalactita_cantidad_derecha[i]
            
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Creación de los objetos especiales

// Lo siguiente es para la creación de los objetos especiales con los atributos dados en el "instance creation code".
for( var i = 2; i &lt; 7; i++ ){

    if( tipo_trampa[i] == true ){
     
        switch( i ){
        
            // Sierra horizontal
            case 2:{
            
                for( var j = 0; j &lt; sierra_h_cantidad; j++ ){
                
                    var xx = sierra_h_x[j],
                        yy = sierra_h_y[j],
                        instancia_sierra = instance_create( xx, yy, ob_chaman_sierra_h );
                        
                    with( instancia_sierra ){
                    
                        vel = other.sierra_h_velocidad[j];
                        image_yscale = other.sierra_h_reflejado[j];
                        
                        effect_create_above( ef_ellipse, x, y, 0, c_white );
                        
                        activado = true;
                    
                    }    
                
                }
            
                break;
                
            }
            
            // Sierra vertical
            case 3:{
            
                for( var j = 0; j &lt; sierra_v_cantidad; j++ ){
                
                    var xx = sierra_v_x[j],
                        yy = sierra_v_y[j],
                        instancia_sierra = instance_create( xx, yy, ob_chaman_sierra_v );
                        
                    with( instancia_sierra ){
                    
                        vel = other.sierra_v_velocidad[j];
                        image_xscale = other.sierra_v_reflejado[j];
                    
                        effect_create_above( ef_ellipse, x, y, 0, c_white );
                            
                        activado = true;
                    
                    }    
                
                }
            
                break;
            
            }
            
            // Invocar estalactitas comunes o las que aparecen y caen
            case 4:
            case 6:{
           
                for( var j = 0; j &lt; estalactita_cantidad; j++ ){
                        
                    var xx = estalactita_x[j],
                        yy = estalactita_y[j],
                        instancia_estalactita;
                    
                    
                    if( estalactita_cantidad_derecha[j] == 0 ){
                                        
                        if( i != 6 ){ 
                        
                            instancia_estalactita = instance_create( xx, yy, ob_estalactita ); 
                            with(instancia_estalactita){ chaman_invocadas = true;  }
                            
                        }
                        else{ instancia_estalactita = instance_create( xx, yy, ob_chaman_estalactita_caer );  }
                        
                        with( instancia_estalactita ){ effect_create_above( ef_ellipse, x + 8, y, 0, c_white ); } 
                    
                    }
                    else{
                    
                        for( var k = 0; k &lt;= estalactita_cantidad_derecha[j]; k++){
                                        
                            if( i != 6 ){ 
                            
                                instancia_estalactita = instance_create( xx, yy, ob_estalactita ); 
                                with(instancia_estalactita){ chaman_invocadas = true;  }
                                    
                            }
                            else{ instancia_estalactita = instance_create( xx, yy, ob_chaman_estalactita_caer ); }
                            
                            with( instancia_estalactita ){ effect_create_above( ef_ellipse, x + 8, y, 0, c_white ); }    
                            
                            xx += 16;
                        
                        }
                    
                    }
                    
                }
                
            
                break;
            
            }
            
        }
    
    }


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_jug">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se activan las trampas indicadas

//---&gt; Se busca las tramaps a activar.
for( var i = 0; i &lt; 7; i++ ){

    if( tipo_trampa[i] == true ){
    
        switch( i ){
        
            // &lt;&lt; Flasheo pantalla &gt;&gt;
            case 0:{
                
                efectos( 1, 2, c_white );
                            
                var trueno = audio_play_sound( sn_jefe_trueno, 5, false );
                audio_sound_pitch( trueno, 1 + random(0.5) );
                audio_sound_gain( trueno, volumen_musica + 0.2, 0 ); 
                
                break;
                
            }
            
            //&lt;&lt; Temblor &gt;&gt;
            case 1:{
            
                temblor_pantalla( 1, 30 );
                
                var temblor = audio_play_sound( sn_desbloquear_temblor, 2, false );
                audio_sound_pitch( temblor, 0.7 + random(0.4) );
                audio_sound_gain(temblor, volumen_musica, 0 );
            
                break;
                
            }
            
            //&lt;&lt; Sierras horizontales&gt;&gt;
            case 2:{
            
                event_perform(ev_alarm, 0);
            
                break;
            
            }
            
            //&lt;&lt; Sierras verticales&gt;&gt;
            case 3:{
            
                event_perform(ev_alarm, 0);
            
                break;
            
            }
            
            //&lt;&lt; Invocar estalactitas &gt;&gt;
            case 4:{ event_perform(ev_alarm, 0); break; }
            
            //&lt;&lt; Hacer caer estalactitas enumeradas &gt;&gt;
            case 5:{
            
                with( ob_chaman_estalactita_numerada ){
                
                    if( numero == other.estalactita_numero ){
                
                        caer = true;
                        alarm[0] = 10; // Alarme que inidca que el objeto caiga.
                        timeline_running = true; // Se activa la animación.
                        
                        effect_create_above( ef_ellipse, x + 8, y, 0, c_white );
                    
                    }
                
                }
                 
                //[Sonido] Cuando esta por caer.
                audio_sound_pitch( sn_estalactita_caer, 0.8 + random( 0.6 ) );
                audio_play_sound( sn_estalactita_caer, 3, false );
    
                break;
            
            }
            
            //&lt;&lt; Invocar estalactitas que caen al aparecer &gt;&gt;
            case 6:{
            
                event_perform(ev_alarm, 0);
            
                //[Sonido] Cuando esta por caer.
                audio_sound_pitch( sn_estalactita_caer, 0.8 + random( 0.6 ) );
                audio_play_sound( sn_estalactita_caer, 3, false );  
                
                break;
            
            }
            
            
        
        }
    
    }

}

//--&gt; Se hace el cambio correspondiente al sprite del chaman y las alarmas que controla.
with( ob_chaman ){

    alarm[0] = -1;
    estado = 1
    image_index = 0;
    alarm[0] = 25;

}

//---&gt; Luego se va fuera de la pantalla (no se destruye ya que si se reinicia el nivel, vuelve todo a su lugar)
x = room_ancho + 10;
y = room_alto + 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>53,0</point>
    <point>72,72</point>
  </PhysicsShapePoints>
</object>
