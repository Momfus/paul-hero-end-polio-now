<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9</depth>
  <persistent>0</persistent>
  <parentName>parent_danio</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicio de atributos.
{

    mask_index = sp_flecha; /* Como el objeto no tiene sprite, se usa la máscara de colison de una flecha para luego removerla y no haga daño al jugador
    al chocar con un objeto sólido*/
    choque = false; // Señala si ha colisionado o no con un objeto sólido
    
    activado = true; // Esto sirve para saber si el objeto hace daño el jugador (se desactiva al chocar con un objeto).
    
    image_speed = 0.2

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Desactiva la flecha.
{
    // Vuelve a su estado normal, es guarda en la cola FIFO y se desactiva.
    choque = false;
    activado = true;
    
    // Se lleva fuera de la pantalla temporalmente.
    x = -10;
    y = -10;
    
    ds_queue_enqueue( cola_flechas, id );
    instance_deactivate_object(id);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_caja_usando">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control colisión caja usando
{ 

    if( choque == false ){
      
        /* Si en la posición que se encuentra detrás de la flecha hay una caja, se desactiva y guarda en la cola FIFO (evita errores visuales), sino realiza 
        la colision con normalidad: se coloca la flecha en el punto exacto antes del choque y luego de un tiempo se desactiva y guarda en la cola FIFO  */
        if( position_meeting(x, y, other) ){ event_perform(ev_alarm, 0) ; }
        else{
    
            var hs = sign(hspeed);
            var vs = sign(vspeed);
            
            while(place_meeting(x, y, other) ){
            
                x = x -  1 * hs;
                y = y -  1 * vs;
                
            }
        
        
            if( speed != 0 ){
            
                speed = 0;
                alarm[0] = 5;
            
            }
            
            // Se señala que esta chocando y se señala que ya no esta activado.
            activado = false;
            choque = true;
        
        }  

    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_caja">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control colisión caja
{ 
  
    if( choque == false ){

        /* Si en la posición que se encuentra detrás de la flecha hay una caja, se desactiva y guarda en la cola FIFO (evita errores visuales), sino realiza 
        la colision con normalidad: se coloca la flecha en el punto exacto antes del choque y luego de un tiempo se desactiva y guarda en la cola FIFO  */
        if( position_meeting(x, y, other) ){ event_perform(ev_alarm, 0) ; }
        else{
        
            var hs = sign(hspeed);
            var vs = sign(vspeed);
            
            while(place_meeting(x, y, other) ){
            
                x = x -  1 * hs;
                y = y -  1 * vs;
                
            }
        
            
            if( speed != 0 ){
            
                speed = 0;
                alarm[0] = 5;
            
            }
            
            // Se señala que esta chocando y se indica que ya no está activado
            activado = false;
            choque = true;    
        
        }

    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parent_plat">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisión con las plataformas
{

    // Al colisionar, se verifica si la flecha tiene una velocidad, si es asi lo detiene un tiempo y luego desaparece.
    if( choque == false and speed != 0 and other.object_index != ob_escalera ){
        
        // Se detiene, se señala que esta chocando
        choque = true;
        activado = false;
        speed = 0;
        
        alarm[0] = 5;
    
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se dibuja el objeto
{

    if( choque == false ){ draw_sprite_ext(sp_flecha,0,x,y, 1, 1, image_angle, c_white, 1); }
    else{ draw_sprite_ext(sp_flecha_rota, -1, x, y, 1, 1, image_angle, c_white, 1); }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
