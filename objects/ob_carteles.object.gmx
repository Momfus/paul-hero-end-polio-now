<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>parent_rebote</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Atributos principales
image_speed = 0;
etapa = 0; // Para manejar el efecto de rebote (menos a 3) y cuando se termina la animacion
vel = 10; // Velocidad en que se mueve el cartel al caer.

posicion_final_y = 0 // Se especifica al crear el objeto con la función "drop_cartel", la posición final donde se queda el cartel.

tipo = 0;
/*

    0   = Título del juego
    1   = Menú principal
    2   = Tipos de controles (WASD + J / K)
    3   = Tipos de controles (Flechas + X / Z)  
    4   = Confirmación de cambio de controles.
    5   = Volver atrás.
    6   = Cantidad de ruedas rotarias totales.
    7   = Cantidad de ruedas rotarias de nivel
    8   = Nombre del sector (varia según el mismo)
    9  = Pausa
    10 = Créditos.
    11 = Logo Crios con chamán encima
    12 = Logo Rotary con la frase.
    
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Llamado especial al crearse

// Según el tipo, se asimila el sprite requerido y se indica, en el caso que lo necesite, cual es punto medio horizontal del cartel.
switch(tipo){

    // Título del juego
    case 0:
    case 11:{ sprite_index = sp_cartel_titulo;  break; }
    
    // Menú Principal
    case 1:{
    
        sprite_index = sp_key_M_menu; // Se usa este para poder usar la animación de la tecla
            
        y = -( sprite_get_height(sp_cartel_menu) * 2 ); // Se lo sube un poco mas arriba en este caso.
        
        // Valores usados para centrar texto o alguna imagen en los carteles.
        centro_cartel_x = x + sprite_get_width(sp_cartel_menu) / 2;
        centro_cartel_y = -32; // El número es negativo debido a que el centro del sprite es en la parte inferior.
        
        
        
        break;
    
    }
    
    // Tipos de controles (ambos) 
    case 2:
    case 3:{ sprite_index = sp_cartel_normal; break; }
    
    // Confirmación de cambio de controles.
    case 4:{
    
        sprite_index = sp_cartel_normal;
        
        // Valores usados para ubicar el texto y la imagen correspondiente a la tecla a presionar.
        cadena = "Configuration#saved.# #Press       ";
        
        x_cad = string_width("Press      ") / 2;  
        y_cad = string_height(' ') + 21 ;
        
        break;
    
    }
    
    // Volver Atrás
    case 5:{
    
        sprite_index = sp_cartel_colgante_chico;
        break;
        
    }
    
    // Cantidad de ruedas rotarias totales en el juego.
    case 6:{
    
        sprite_index = sp_cartel_colgante_medio;
        dato = string( control_general.juego_total_ruedas )
        
        break;
            
    }
    
    // Cantidad de ruedas rotarias en el sector
    case 7:{
    
        sprite_index = sp_cartel_colgante_medio
        dato = string( control_general.sector_total_ruedas[sector_actual] ) 
    
        break;
        
    }
    
    // Nombre del sector
    case 8:{ 
    
        sprite_index = sp_cartel_colgante_grande; 
        nombre = "";
        
        switch(sector_actual){
        
            case 1:{ nombre = "Beach"; break; }
            case 2:{ nombre = "Waterfall"; break; }
            case 3:{ nombre = "Mountain"; break; }
            case 4:{ nombre = "Cave"; break; }
            case 5:{ nombre = "Village"; break; }
            case 6:{ nombre = "Dark Forest"; break; }
                                
        }
            
        break; 
        
    }
    
    // Pausa
    case 9:{ sprite_index = sp_key_M_menu; break; } // Se usa este para poder usar la animación de la tecla
    
    // Créditos.
    case 10:{ sprite_index = sp_cartel_colgante_medio; break; } 
    
    // Logo CRIOS con Chaman
    case 12:{ 
    
        // Logo
        estiramiento = 1.2;
        
        alto_medio_y = ( sprite_get_height( sp_logo_crios ) / 2 ) * estiramiento;
        
        frase = "Presents"
        
        // Chaman
        sprite_index = sp_chaman_invocar; 
        image_speed = 0.1;
        
        chaman_y = alto_medio_y * 2 - 32;
            
        riendo = false;
        
        break; 
        
    }
    
    // Logo Rotary + frase.
    case 13:{ 
    
        sprite_index = sp_logo_rotary;
        estiramiento = 1.2;
        
        alto_medio_y = ( sprite_get_height( sp_logo_rotary ) / 2 ) * estiramiento;
        frase[0] = "Supported by: "
        frase[1] = "'Service Above Self' "
        
        break;
    
    }
   
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manejo de la animación del cartel y posicionamiento (si es menú)

// Si la etapa no es "3", se realiza la animación, sino se hace lo necesario según que tipo de cartel es.
if( etapa != 3 ){

    switch( etapa ){
    
        // Bajando pasando por 16 pixeles la posición deseada.
        case 0:{
        
            if( y &lt; ( posicion_final_y + 16 - vel ) ){ y += vel; if( vel &lt; 20 ){ vel += grav; } }
            else{ etapa++; vel = 10; }
            
            break;
        
        }
        
        // Sube hasta 8 pixeles por encima de la posición deseada
        case 1:{
        
            if( y &gt; ( posicion_final_y - 8 ) ){ y -= vel; if( vel != 0 ){ vel -= grav; } }
            else{ etapa++; vel = 5; }
            
            break;
        
        }
        
        // Baja hasta la posición deseada
        case 2:{
        
            if( y &lt; posicion_final_y ){ y += vel; if( vel &lt; 20 ){ vel += grav; } }
            else{ etapa++; }
        
            break;
        
        }
    
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control dibujado carteles


// Según el tipo enviado, es lo que se dibuja (actualizando posición en el caso 
switch(tipo){

    // Título del juego
    case 0:{ draw_sprite(sp_cartel_titulo, 0, x, y); break; }
    
    // Menú Principal
    case 1:{
    
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
       
        
        draw_set_color(c_white);
    
        var alto_opciones = sprite_get_height( sp_cartel_menu ) - 1;
    
        // Carteles
        draw_sprite( sp_cartel_menu, 0, x, y ); // Jugar
        draw_sprite( sp_cartel_menu, 0, x, y + alto_opciones ); // Controles
        draw_sprite( sp_cartel_menu, 0, x, y + alto_opciones * 2 ); // Créditos
        draw_sprite( sp_cartel_menu, 0, x, y + alto_opciones * 3 ); // Sobre PolioPlus
        draw_sprite( sp_cartel_menu, 0, x, y + alto_opciones * 4 ); // Ir Página Rotary
        draw_sprite( sp_cartel_menu, 0, x, y + alto_opciones * 5 ); // Ir Página Crios.
    
        // Texto    
        draw_set_font(fn_principal_big);
        draw_text( centro_cartel_x, y + centro_cartel_y, "Play" );
        
        draw_set_font(fn_principal_normal);
        draw_text( centro_cartel_x, y + centro_cartel_y + alto_opciones, "CONTROLS");
        draw_text( centro_cartel_x, y + centro_cartel_y + alto_opciones * 2, "CREDITS");
        draw_text( centro_cartel_x, y + centro_cartel_y + alto_opciones * 3, "POLIOPLUS#CAMPAIGN");
        
        draw_sprite_ext( sp_logo_rotary, 2 , centro_cartel_x + 8, y + centro_cartel_y + alto_opciones * 4, 0.5, 0.5, 0, c_white, 1 );
        draw_sprite_ext( sp_logo_crios, 0 , centro_cartel_x, y + centro_cartel_y + alto_opciones * 5, 0.5, 0.5, 0, c_white, 1 );
        
        // Mensaje que señala apagar o prender la música
        
        //--&gt; Parlante
        
        var parlante_x = room_centro_x + 280;
        
        if( control_general.vol != 0 ){ draw_sprite(sp_parlante_on_off_menu, 0,  parlante_x, 600 ); }
        else{ draw_sprite(sp_parlante_on_off_menu, 1,  parlante_x, 600 ); }
        
        //--&gt; Signo igual
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        
        draw_set_colour(c_black);
        draw_text(  parlante_x + 36, 584, "=" );
        
        draw_set_colour(c_white);
        draw_text(  parlante_x + 34, 582, "=" );
        
        //--&gt; Tecla M
        image_speed = 0.1;
        draw_sprite( sp_key_M_menu, -1,  parlante_x + 80, 600 );
   
        break;
    
    }
    
    // Tipos de controles (WASD + J / K)
    case 2:{ 
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        
        if( control_menu_pausa.menu_opcion == 0 ){ 
            
            draw_sprite_ext( sp_cartel_normal, 0 , x - 13, y + 6, 1.1, 1.1, 0, -1, 1 ); 
            draw_text_transformed( x + 112, y - 64, "WASD#J / K", 1.1, 1.1, 0);
                
        }
        else{ 
        
            draw_sprite_ext( sp_cartel_normal, 0 , x, y, 1, 1, 0, -1, 1 );  
            draw_text_transformed( x + 112, y - 64, "WASD#J / K", 1, 1, 0);
                
        }
        
        draw_set_font(fn_principal_normal);
        
        break; 
        
    }
    
    // Tipos de controles (FLECHAS + X / Z)
    case 3:{ 
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
    
        if(control_menu_pausa. menu_opcion == 1 ){ 
        
            draw_sprite_ext( sp_cartel_normal, 0 , x - 13, y + 6, 1.1, 1.1, 0, -1, 1 ); 
            draw_text_transformed( x + 112, y - 64, "Arrows Keys#X / Z", 1.1, 1.1, 0);
            
        }
        else{ 
        
            draw_sprite_ext( sp_cartel_normal, 0 , x, y, 1, 1, 0, -1, 1 );  
            draw_text_transformed( x + 112, y - 64, "Arrows Keys#X / Z", 1, 1, 0);
            
        }
        
        draw_set_font(fn_principal_normal);
        
        break;
        
    }
    
    // Confirmación de cambio de controles.
    case 4:{ 
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        
        draw_sprite_ext( sp_cartel_normal, 0 , x - 26, y + 12, 1.3, 1.2, 0, -1, 1 );
        draw_text_ext(x + 116, y - 70, cadena, 34, -1);
        draw_sprite(sprite_tecla_aceptar, 0, ( x + 116 + x_cad ), ( y - 64 + y_cad ) );
        
        draw_set_font(fn_principal_normal);
        
        break;
    
    }
    
    // Volver Atrás
    case 5:{
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        
        draw_sprite( sp_cartel_colgante_chico, 0, x, y );
        draw_text( x + 96, y - 30, "BACK");
    
        draw_set_font(fn_principal_normal);
        
        break;
    
    }
    
    // Cantidad de ruedas rotarias totales en el juego
    case 6:{
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_right);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        
        draw_sprite( sp_cartel_colgante_medio, 0, x, y); // Cartel
        draw_sprite( sp_rueda_rotaria_grande, 2, x, y - 54) // Logo rotario
                    
        // Número en dos digitos del total que se tiene con el total que hay en el juego.
        draw_text_transformed( x + 192, y - 30, dato + " / 198", 0.9, 1, 0); 
        
        draw_set_font(fn_principal_normal);
        
        break;
    
    }
    
    // Cantidad de ruedas rotarias en el sector
    case 7:{
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_right);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        
        draw_sprite( sp_cartel_colgante_medio, 0, x, y); // Cartel
        draw_sprite( sp_rueda_rotaria_grande, 2, x + 8, y - 54 ) // Logo rotario
                    
        // Número en dos digitos del total que se tiene con el total que hay en el juego.
        draw_text( x + 192, y - 30, dato + " / 33"); 
        
        draw_set_font(fn_principal_normal);
        
        break;
    
    }
    
    // Nombre del sector
    case 8:{
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        
        draw_sprite( sp_cartel_colgante_grande, 0, x, y); // Cartel
        
        // Nombre del nivel
        draw_text( x + 128, y - 30, string(nombre) );
        
        draw_set_font(fn_principal_normal);
        
        break;
    
    }
    
    //Pausa
    case 9:{
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
    
        // Cartel de Fondo
        draw_sprite( sp_cartel_pausa, 0, x, y ); 
        
        // Palabra "Pausa"
        draw_text_transformed( x + 104, y - 144, "PAUSE", 1.2, 1.2, 0);
        
        // Mensaje que señala apagar o prender la música
        
        //--&gt; Parlante
        
        var parlante_x = room_centro_x + 280;
        
        if( control_general.vol != 0 ){ draw_sprite(sp_parlante_on_off_menu, 0,  parlante_x, 30 ); }
        else{ draw_sprite(sp_parlante_on_off_menu, 1,  parlante_x, 30 ); }
        
        //--&gt; Signo igual
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        
        draw_set_colour(c_black);
        draw_text(  parlante_x + 30, 6, "=" );
        
        draw_set_colour(c_white);
        draw_text(  parlante_x + 28, 4, "=" );
        
        //--&gt; Tecla M
        image_speed = 0.1;
        draw_sprite( sp_key_M_menu, -1,  parlante_x + 80, 30 );
        
        break;
        
       
    
    }
    
    // Créditos
    case 10:{
    
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_set_color(c_white);
        
        draw_sprite( sp_cartel_colgante_medio, 0, x, y); // Cartel
        draw_text( x + 100, y - 30, "Credits"); 

        draw_set_font(fn_principal_normal);
        
        break;
    
    }
    
    // Título usado en los créditos (debe ser mas chico para que se vea bien)
    case 11:{ draw_sprite_ext(sp_cartel_titulo, 0, x, y, 0.8, 1, 0, c_white, 1); break; }
    
    // Logo de Crios con chamán
    case 12:{ 
    
        // Logo
        draw_sprite_ext( sp_logo_crios, 0, x, y - alto_medio_y, estiramiento, estiramiento, 0, c_white, 1 ); 
        
        draw_set_font(fn_principal_big);
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        draw_set_color(c_white);
        
        draw_text_transformed( x, y + alto_medio_y - 32, frase, estiramiento, estiramiento, 0 );
        
        // Chaman
        if( riendo == false ){ draw_sprite( sp_chaman_invocar, 0, x, y - chaman_y); } // Quieto
        else{ // Riendo
            
            var yy = y - chaman_y;
            draw_sprite( sp_chaman_riendo, -1, x, yy); 
            draw_sprite( sp_chaman_jaja, -1, x - 64, yy - 32 );
            
        } 
                    
        
        break;
        
    }
    
    // Logo Rotary más frase.
    case 13:{
    
        draw_sprite_ext( sp_logo_rotary, 0, x, y - alto_medio_y, estiramiento, estiramiento, 0, c_white, 1 );
        
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        draw_set_color(c_white);
        
        draw_set_font(fn_principal_big);
        draw_text_transformed( x, y  - ( alto_medio_y * 3 ), frase[0], estiramiento, estiramiento, 0 );
        
        draw_set_font(fn_principal_normal);
        draw_text_transformed( x, y + alto_medio_y - 10, frase[1], estiramiento, estiramiento, 0 );
    
        break;
    
    }
    
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>176,176</point>
  </PhysicsShapePoints>
</object>
