<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_punto_entrega</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Declaración de atributos

caja_existe = instance_exists(ob_caja); /* Usado para saber si debe enseñar un pop-up al jugador si no tiene la caja que esta en el nivel o, si la tiene, 
para que vaya primero a dejar la misma y luego al túnel.*/

caja_entregar = caja_existe // Usado para corroborar si ha dejado la caja o no durante la animación

/* Lo siguiente es para que dependiendo si existe una caja, la flecha apunte a la misma y no a la puerta, cuando no existe o si se agarró la caja se
apunta a la puerta. 0 = apunta a la puerta; 1 = apunta a la caja; 2 = no aparece (como cuando el jugador muere) */
if( caja_existe == false ){ apuntar_flecha = 0; }
else{ apuntar_flecha = 1; }

// Se verifica si esta en el nivel final del sector (o uno extra en el caso que el primer caso sea falso) o no para cambios de animación y sprite.
final_sector = string_count("final", room_get_name(room) );
final_extra = false;
 
if( final_sector == false ){  

    final_extra = string_count("extra", room_get_name(room) ); 
    
    // En el caso que sea un nivel extra, se cumple las mismas animaciones de final de sector pero se cambia el sprite por el correspondiente al nivel extra.
    if( final_extra == true ){  final_sector = true; } 
    
}
    
estado = 0; /* Indica que animación o imagen mostrar de este objeto.
    
                0 = Se muestra normalmente (sin caja)
                1 = Se muestra normalmente con caja.
                2 = Se muestra con el banderin de rotary donde el jugador lo deja con caja.
    
*/
    
fin_nivel = 0; /* Indica en que parte al terminar el nivel se encuentra 
    
                0   = No se esta terminando el nivel.
                1   = El jugador esta moviéndose por un path.
                2   = El jugador esta dejando la caja
                3   = El jugador esta festejando y entrando por la cueva.
                4   = El jugador deja la bandera rotaria a un lado.
                
*/

// Coordenadas importantes a guardar.
    
centro_puerta_x = x + 33; // Por donde se va el jugador.
centro_entrega_x = x + 51; // Donde se detiene para dejar la caja.
    
    
// La velocidad de imagen es usado solo por la flecha
image_speed = 0.25;

// Variable usada para cuando se posiciona aldeanos en arreglo.  
aldeano_cantidad = 0;
aldano_x[0] = 0;
aldeano_numero[0] = 0;
aldeano_depth[0] = 0;
    
alarm[0] = 50 + irandom( 100 ); // Para que aleatoriamente haga que algun aldeano pida caja.

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se controla que el jugador no se haya trabado

// Esto es para evitar el error que al terminar el nivel queda trabado en el lugar

if( caja_entregar == false ){
    
    // Si el jugador aún está llendo hacia la cueva, se lo ubica automáticamente allí.
    if( fin_nivel == 1 and ob_jug.path_position != 1 ){
    
        with(ob_jug){
        
            x = other.centro_puerta_x;
            y = other.y - 16
            
             timeline_position = 0; 
             timeline_running = true; 
        
        }
                   
                
        fin_nivel = 3; 
    
    }


}
else{

    // Si el jugador aún está llendo hacia la cueva, se lo ubica automáticamente allí.
    if( ob_jug.path_position != 1 ){
    
        if( fin_nivel == 1 ){
        
            with(ob_jug){
            
                x = other.centro_entrega_x;
                y = other.y - 16
                
                spr = 0; // Como deja la caja a la derecha, se coloca el sprite mirando a la derecha.
                
                path_end()
                with(ob_caja_usando){ path_end(); }
                        
                timeline_position = 1;
                timeline_running = true; 
            
            }
                       
                    
            fin_nivel = 2; 
            
            alarm[2] = 90; 
            
        }
        else{
        
            with(ob_jug){
        
                x = other.centro_puerta_x;
                y = other.y - 16
                
                timeline_position = 0; 
                timeline_running = true; 
            
            }
                   
                
            fin_nivel = 3;
        
        }
    
    }
    else{
    
        
    
    }
    


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reseo pedir caja.

if( aldeano_cantidad == 0 ){

    with( ob_aldeanos ){ pedir_caja = false; }

}
else{

    with( ob_aldeanos ){
    
        if( pedir_caja == true ){ pedir_caja = false; break; }
    
    }

}


// Se llama de nuevo a la alarma 0 para volver a elegir al que pide caja.
alarm[0] = 250 + irandom( 100 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Aldeano pide caja.

// No pide caja cuando el personaje tiene el pop-up que esta delante del punto de entrega.
if( instance_exists(ob_jug) and ob_jug.show_popup &lt; 3 ){
    
    if( aldeano_cantidad = 0 ){
    
        with( ob_aldeanos ){ pedir_caja = true; }
    
    }
    else{
    
        var num = irandom(aldeano_cantidad - 1);
        
        with( ob_aldeanos ){
        
            if( aldeano_id == num ){ pedir_caja = true; break; }
        
        }
    
    
    }
    
    
    alarm[1] = 20; // Se llama a la alarma que hace que el que pedia la caja vuelva al estado enfermo.

}
else{

    alarm[0] = 30;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control del path del jugador.
{
    // Se verifica si ya se movió al jugador a la entrada a la cueva y si el "path" que realiza el jugador se ha terminado.
    if( fin_nivel == 1 and ob_jug.path_position == 1){

        if( caja_entregar == false ){
        
            // Se va a la cueva.
            if( caja_existe == false or final_sector == false or estado == 2 ){

                // Se ejecuta el timeline asociado al jugador y se señala a este objeto que se esta realizando la animación final.
                with(ob_jug){ 
                
                    timeline_position = 0; 
                    timeline_running = true; 
                    
                }    
                
                fin_nivel = 3; 
                
            }
            else{
             
                // Se llama a la animación corespondiente a dejar la bandera.
                with(ob_jug){
                
                    timeline_position = 2;
                    timeline_running = true;
                
                }
                
                fin_nivel = 4;
            
            }  
        
        }
        else{
        
            
        
            /* Se ejecuta el timeline asociado al jugador (ademas de detener el path tanto del jugador como de la caja) y se señala a este objeto que 
            el jugador esta dejando la caja.*/
            with(ob_jug){ 
                
                spr = 0; // Como deja la caja a la derecha, se coloca el sprite mirando a la derecha.
            
                path_end()
                with(ob_caja_usando){ path_end(); }
                    
                timeline_position = 1;
                timeline_running = true; 
                    
            } 
        
            fin_nivel = 2; 
            
        }
        
              
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_jug">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cuando el jugador llega al objeto
{

    
    // Se realiza lo siguiente en el caso que no se esté produciendo animación alguna del fin de nivel.
    if( fin_nivel == 0 ){

        /* En el caso que haya una caja en el nivel y que el jugador no la tenga al colisionar con este objeto, se muestra un pop-up sobre el jugador
        selñando que la tiene que ir a buscar, caso contrario comienza la animación de fin de nivel. */
        if( caja_existe == true and ob_jug.con_caja == false ){
        
            with(ob_jug){
            
                if( show_popup != 3 ){ show_popup = 3; }
            
            }
        
        }
        else{
    
            // El jugador debe presionar la tecla hacia arriba para terminar el nivel, mientras no lo haga se muestra un pop-up con esa tecla
            if( other.move_up == true ){
            
                // Se quita cualquier otro sonido que hubiera
                audio_group_stop_all( audiogroup_default );
            
                //---&gt; Si está en el sector extra, se cambia el sprite del chaman para que sea enojado y se detienen sus alarmas.
                if( sector_actual == 6 ){
                
                    with( ob_chaman ){
                    
                        alarm[0] = -1;
                        sprite_index = sp_chaman_enojado;
                        estado = 3;
                    
                    }
                
                }
            
                /*--- Se realizan el paso de nivel o se pide que lleve la caja solo si la animación de fin de nivel no se está realizando y  el jugador no está en 
                el aire (para no tener problemas de colisión).*/
                if( fin_nivel == 0 and other.en_aire == false ){
                
                    // Esta alarma es llamada para controlar que el jugador ya está festejando, evitando que por cualquier motivo se quede caminando en el lugar.
                    if( caja_entregar == false ){ alarm[2] = 60; }
                    else{ alarm[2] = 90; }
                
                    // Se detienen los objetos en pantalla.
                    activado_todo(false);
                    
                    // No se permite hacer pausa
                    with(control_menu_pausa){ can_pausa = false; }
                    
                    // Se detiene al jugador y cualquier indicativo del uso del teclado por parte del jugador.
                    with( other ){
                    
                        controlar = false; 
                        
                        last_key_h = 0;
                        last_key_v = 0;
                        
                        hsp = 0;
                        vsp = 0;
                        impulso = 0;
                    
                    }
                    
                    //--- Se mueve el jugador con un "path" desde donde esta hasta donde debe ir (si tiene la caja primero la deja, sino va a la entrada directamente.
                    
                    var pth_temp_puerta, jug_x, jug_y;
                    
                    pth_temp_puerta = control_general.pth_jug_fin_nivel; 
                    jug_x = ob_jug.x;
                    jug_y = ob_jug.y;
                    
                    // Se colocan los puntos necesarios (que varían si tiene que dejar la caja y luego ir a la entrada del tunel o ir directamente al tunel).
                    path_add_point( pth_temp_puerta, jug_x, jug_y, 100);
                    
                    if( caja_entregar == false ){ path_add_point( pth_temp_puerta, centro_puerta_x, y - 16, 100); }
                    else {  
                    
                        path_add_point( pth_temp_puerta, centro_entrega_x, y -16, 100 ); 
                    
                        // Se elimina el llamado alarm que cambia a los aldeanos a pedir caja.
                        alarm[0] = -1;
                        alarm[1] = -1;
                        
                        with( ob_aldeanos ){
                        
                            festejando = true;
                            image_speed = 0.2;
                        
                        }
                        
                        //--- Manejo de la musica en el caso que haya que dejar la caja.
                        
                        // Se baja la música de fondo 
                        with(control_general){ audio_sound_gain(musica_principal, 0, 0); }
                        
                        // Se reproduce la música de festejo de final del sector (si es lo que está) sino el que corresponda..
                        var musica_festejo;
                        if( final_sector == true  ){ musica_festejo = audio_play_sound(music_final_sector, 0, false); }
                        else{ musica_festejo = audio_play_sound(music_final_nivel_caja, 0, false); }
                        
                        audio_sound_gain(musica_festejo, volumen_musica, 0); 
                    
                    }
                    
                    //--- Se cambia el sprite del jugador dependiendo donde se encuentra con respecto al punto que debe ir primero y comienza a moverse por el path.
                    with(other){ 
                        
                        show_popup = 0;
                    
                        path_start(pth_temp_puerta, 2, 0, false);
                        
                        /* Se asigna al jugador el timeline relacionado con la animación de festejo y final, como también cuando deja la caja si está en
                        el nivel final del sector.*/
                        timeline_index = time_fin_nivel;
                    
                        // Si el jugador tiene la caja, se asigna el mismo path primero haciendo que se mueva a la misma ubicación.
                        if( con_caja == true ){ 
                        
                            with(ob_caja_usando){ path_start(pth_temp_puerta, 2, 0, false); } 
                            
                        }
                        
                        // Cambio del sprite
                        if( x &lt; path_get_point_x(path_index, 1) ){ spr = 2; }
                        else{ spr = 3; }
                        
                    }
                    
                    // Se indica que ya se está realizando lo necesario cuando termina el nivel.
                    fin_nivel = 1;
            
                }
                
            }
            else{
            
                with( ob_jug ){
                
                    if( show_popup != 4){ show_popup = 4; } 
                
                }
            
            }
        
        }
    
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control del sprite
{

    // Se dibuja el sprite normalmente y luego encima segun si hay caja o esta al final de un sector.
    draw_sprite( sprite_index, 0, x, y);
    
    if( caja_existe == true ){
    
        draw_sprite( sp_punto_entrega_decorado, 0, x + 99, y ); // El lugar donde se deja la caja.
    
    }
    
    // Se dibuja la flecha del medio de la puerta para indicar al jugador (pero solo cuando no esta haciendo la animación final)
    if( fin_nivel == 0 ){
    
        if( apuntar_flecha == 0 ){ draw_sprite(sp_punto_entrega_flecha, -1, centro_puerta_x, y - 40); }
        else{ 
        
            if( apuntar_flecha == 1 ){ draw_sprite_ext(sp_punto_entrega_flecha, -1, ob_caja.x + 16, ob_caja.y - 20, 1, -1, 0, c_white, 1); }
            
        }
        
    }
    
    // En el caso de haber dejado la bandera y/o la caja, se dibuja la misma
    switch(estado){
    
        case 1:{ draw_sprite(sp_caja, 0, x + 67, y - 48 ); break; }
        
        case 2:{ 
        
            draw_sprite(sp_caja, 0, x + 67, y - 48 );
            draw_sprite(sp_bandera_rotary, 0, x + 18, y ); 
            
            break;
            
        }  
        
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,73</point>
    <point>45,45</point>
  </PhysicsShapePoints>
</object>
