<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_jug_quieto</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Atributos del objeto
{

    controlar = true; // Se permite al jugador moverse.

    /* Los siguientes son de control de velocidad (no uso los de GM para tener mayor control paso por paso) y salto, 
    la gravedad se maneja con la constante "grav".*/
    
        hsp = 0;
        vsp = 0;
        
        ace = 0.5; // Aceleración que va aumentando mientras camina hasta llegar a la constante "vel_h"
    
        impulso = 0; // Indica la velocidad de "impulso" cuando se salta para los costados.
        
        can_jump = false /* Señala si puede o no saltar (esto evita algunas cosas como que no salte de forma continua
        mientras se mantiene la tecla para saltar)*/
        
        still_jump = false; /* Usado para marcar hasta cuando la velocidad de saltar se incremento, cuando se suelta la 
        tecla usada para ello, por más que no sé llego al máximo, este no aumenta.*/
        
        en_aire = false; // Señala si esta o no en el aire ( o sea, que no esta en el suelo, para aplicar gravedad).
        
    // Las siguientes son de referencia para el uso de la caja.
    
        con_caja = false; // Señala si se está o no usando la caja.
        
    // Las siguientes son de referencia para el uso de la escalera.
        
        en_escalera = false; // Señala si se está o no usando alguna escalera.
        can_escalera = true; // Señala si se puede o no usar la escalera (usado para cuando se suelta y se presiona el de agarrar nuevamente).
    
    // Las siguientes son variables de usos diversos.
    
        can_bajar_plat = true; /* Usado para señalar cuando se puede o no atravesar una plataforma como los "ob_plat_static_cloud" cuando se 
        presiona "abajo + salto", por lo que temporalmente las "ayudas" y la detección de colisión como un suelo desaparecen temporalmente hasta que 
        deje de tener contacto con ese objecto.*/
        
        plat_movil_id = 0; // El ID de la plataforma móvil sobre la que está el jugador ( sea una caja o no).
        
        show_popup = 0; /* Indica que "pop-up" se está mostrando al jugador, es usado asì para que no se sobrepongan si uno ya esta activo.
        
            0 = No se muestra "pop-up" alguno.
            1 = Hay alguna interaccion.
            2 = No se puede dejar la caja en el sitio que se desea.
            3 = Se necesita la caja para poder avanzar.
        
        */
        
        spr = 0; /* Usado para manejar el sprite del jugador y saber en que dirección esta mirando, los pares ( comenzando desde cero) representan
        mirando a la derecha y los impares mirando a la izquierda (hecho de este modo para distinguir rápidamente mediante la función módulo).
        
            Sin estar en una escalera:
            
                0 / 1 = Quieto.
                2 / 3 = Caminando
                
                4     = Festejando sin caja
                5     = Festejando con caja
                6     = Entrando a la cueva sin caja
                7     = Entrando a la cueva con caja
                
                
            Estando en una escalera:
            
                0       = Quieto
                1 / 2   = Mirando a la izquierda o derecha.
                3       = Subiendo o bajando
                
        
        */
        
        
        
    /* Los siguientes son para tener control de las teclas que se usan (así es más fácil luego cambiar las cosas).

    Nota: false = no se está presionando, true = se esta presionando(cuando se suelta u otros no hace falta).
    
    */
        
        // Se está presionando una tecla para moverse ( keyboard_check ).  
        move_right = false;
        move_left = false;
        move_up = false; 
        move_down= false;
        
        move_jump = false;
        uso_interac = false;
        
        // Apenas se presiona una tecla para moverse (keyboard_check_pressed ).
        move_apenas_right = false;
        move_apenas_left = false;
        move_apenas_up = false;
        move_apenas_down = false;
        
        move_apenas_jump = false;
        
        
        
        // Se deja de presionar una tecla para realizar "x" acción ( keyboard_check_released ).
        soltar_jump = false;
        soltar_interac = false;
        
        last_key_h = 0; // Se guarda la ultima tecla horizontal presionada (dando prioridad a esta para moverse horizontalmente).
        last_key_v = 0; // Se guarda la última tecla vertical presionada (dando prioridad a esta para moverse verticalmente).
        
              
        can_interac = true; /* Usado para habilitar cuando puede o no interactuar con objetos, generalmente usado con la caja para cuando el jugador
        suelta la tecla de interactuar se habilita la posibilidad de presionarla de nuevo para dejar la caja (evitando el agarrase al mismo tiempo
        que justo se baja) */
        
        
        accion = 0; /* Señala los estados del jugador según el uso del teclado.
        
            Valores:
            
                    0 = Quieto (estando o no en la derecha)
                    1 = Moviéndose a la izquierda.
                    2 = Moviéndose a la derecha.
                    3 = [En escalera] Mirando a la izquierda.
                    4 = [En escalera] Mirando a la derecha.
                    5 = [En escalera] Subiendo.
                    6 = [En escalera] Bajando.
        
        */
        
        pitch_orbe = 1; // Se usa para hacer subir el tono del sonido al agarrar una orbe, este lo hace con un limite y al pasar un tiempo se reinicia.
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reinicio de pitch de orbe

pitch_orbe = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se habilita el poder usar la escalera.
{

    can_escalera = true;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Eliminación del pop-up
{

    // Al llamar esta alarma se elimina cualquier pop-up que hubiera (mientras no se haya desactivado la misma).
    if( show_popup != 0 ){ show_popup = 0; }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control del teclado.

// Se comprueba que el jugador pueda moverse (se desactiva cuando se termina un nivel por ejemplo).
if( controlar == true ){

    // Primero se verifica que teclas se están presionando.
        
    move_right = keyboard_check(tecla_right);  
    move_left = keyboard_check(tecla_left); 
    move_up = keyboard_check(tecla_up);
    move_down = keyboard_check(tecla_down);
    
    move_jump = keyboard_check(tecla_jump);
    uso_interac = keyboard_check(tecla_interac);
    
    
    move_apenas_right = keyboard_check_pressed(tecla_right);
    move_apenas_left = keyboard_check_pressed(tecla_left);
    move_apenas_up = keyboard_check_pressed(tecla_up);
    move_apenas_down = keyboard_check_pressed(tecla_down);
    
    move_apenas_jump = keyboard_check_pressed(tecla_jump);
    
    
    soltar_jump = keyboard_check_released(tecla_jump);
    soltar_interac = keyboard_check_released(tecla_interac);
    
    
    /*----------------------------------
    -- CONTROL DE CAMBIOS DE "ACCION" --
    -----------------------------------*/

    switch(accion){

        /***********
        ** Quieto **
        ************/
        case 0:{
        
            // Se marca que no se está presionando tecla horizontal alguna
            last_key_h = 0;
            
            /* Tecla IZQUIERDA: Se realiza si ha presionado la tecla correspondiente y no esta presionando la tecla de movimiento contrario o si 
            apenas presionó la tecla de movimiento izquierda.*/
            if ( ( move_left == true and move_right == false ) or move_apenas_left == true ){ 
                
                /*Si el jugador no está en una escalera, va a las acciones de movimiento...caso contrario, el jugador mira a la izquierda y puede saltar
                hacia esa dirección.*/
                if( en_escalera == false ){
                
                    // Se comienza a mover a la izquierda si hay espacio suficiente para moverse.
                    if not ( place_meeting( x - 1, y, parent_plat_solido ) ){
                    
                        accion = 1;
                            
                        break;
                      
                    }
                
                }
                else{
                
                    accion = 3;
                    spr = 1; // Se setea la variable que señala que sprite usar por el jugador (mirando a la izquierda). 
                    
                
                }
                  
            }
            
            /* Tecla DERECHA: Se realiza a si ha presionado la tecla correspondiente y no esta presionando la tecla de movimiento contrario o si 
            apenas presionó la tecla de movimiento derecha.*/
            if ( ( move_right == true and move_left == false )or move_apenas_right == true ){ 
            
                /*Si el jugador no está en una escalera, va a las acciones de movimiento...caso contrario, el jugador mira a la izquierda y puede saltar
                hacia esa dirección.*/
                if( en_escalera == false ){
                
                    if not ( place_meeting( x + 1, y, parent_plat_solido ) ){
                    
                        accion = 2; 
                        
                        break;
                      
                    }
                
                }
                else{
                
                    accion = 4;
                    spr = 2; // Se setea la variable que señala que sprite usar por el jugador (mirando a la derecha).
                    
                
                }
                
                  
            }
            
            // Lo siguiente se hace solo cuando el jugador está usando una escalera.
            if( en_escalera == true ){
            
                /* Tecla ARRIBA: Se realiza si ha presionado la tecla correspondiente y no está presionando la tecla de movimiento contrario o si apenas
                presionó la tecla de movimiento arriba (ademas que no haya un techo sólido).*/
                if ( ( ( move_up == true and move_down == false ) or move_apenas_up == true ) and !place_meeting(x, y - 4, parent_plat_solido) ){ 
                
                    //Se controla que haya espacio suficiente para moverse hacia arriba.
                    if not ( place_meeting( x, y - 1, parent_plat_solido) ){
                    
                        accion = 5;
                        spr = 3;
                    
                    }
                
                }
                
                /* Tecla ABAJO: Se realiza si ha presionado la tecla correspondiente y no está presionando la tecla de movimiento contrario o si apenas
                presionó la tecla de movimiento abajo. NOTA: Lo de colisionar con un suelo o que no hay nada se encarga el estado "acción" correspondiente*/
                if ( ( move_down == true and move_up == false ) or move_apenas_down == true ){
                
                    accion = 6;
                    spr = 3;
                
                }
            
            }
            
            
            // Si el jugador esta en el aire sin presionar tecla alguna para moverse, se coloca el factor de velocidad "hsp" en cero.
            if ( en_aire == true ){ hsp = 0; }
                   
            break;
        
        }
        
        /**********************************
        ** Caminando hacia la izquierda. **
        **********************************/
        case 1:{
            
            // Se marca que la última tecla presionada es la correspondiente a este estado.
            last_key_h = tecla_left; 
        
            // La velocidad en que se mueve al usar el teclado depende si está o no en el aire.
            if ( en_aire == false ){ 
                
                // Si la velocidad horizontal actual es menor que la máxima, se va acelerando al jugador.
                if ( hsp &gt; -vel_h ){ hsp -= ace; } 
                
            }
            else{ 
                
                if ( impulso &lt;= 0 ){ hsp = -vel_h_aire; } 
                else{ impulso -= 0.5; }
                
            }
        
            // Cambiar a moverse a la derecha (si hay espacio suficiente).
            if ( move_apenas_right == true ){ accion = 2; }
        
            // Si ya no presiona para moverse a ese sentido, el jugador se detiene.
            if ( move_left == false ){ accion = 0; }
            
        
            break;
            
        }
        
        /********************************
        ** Caminando hacia la derecha. **
        *********************************/
        case 2:{
        
            // Se marca que la última tecla presionada es la correspondiente a este estado.
            last_key_h = tecla_right; 
        
            // La velocidad en que se mueve al usar el teclado depende si está o no en el aire.
            if ( en_aire == false ){ 
            
                // Si la velocidad horizontal actual es menor que la máxima, se va acelerando al jugador.
                if ( hsp &lt; vel_h ){ hsp += ace; }
                
            }
            else{ 
                
                if ( impulso &gt;= 0 ){ hsp = vel_h_aire; } 
                else{ impulso += 0.5; }
                
            }
        
            // Cambiar a moverse a la izquierda.
            if ( move_apenas_left == true ){ accion = 1; }
            
            
        
            // Si no presiona mas la tecla para moverse a la derecha, el jugador se detiene.
            if ( move_right == false ){ accion = 0; }
            
        
            break;
            
        }
        
        /*-------------------------------------------------------------------------------------------------------------------
        
                                            LAS SIGUIENTES ACCIONES SON CUANDO SE ESTÁ USANDO LA ESCALERA
        
        --------------------------------------------------------------------------------------------------------------------*/
        
        /****************************************
        ** EN ESCALERA: Mirando a la Izquierda **
        ****************************************/
        case 3:{
        
            // Cambia a "mirar a la derecha" si presiona le tecla correspondiente.
            if( move_apenas_right == true ){ accion = 4; spr = 2; }
            
            // Cambia a "moverse hacia arriba" si presiona la tecla correspondiente.
            if( move_apenas_up == true ){ accion = 5; spr = 3; }
            
            // Cambia a "moverse hacia abajo" si presiona la tecla correspondiente.
            if( move_apenas_down == true ){ accion = 6; spr = 3; }
            
            // Si suelta la tecla que mantiene este estado, vuelve al que indica que está quieto.
            if( move_left == false ){ accion = 0; spr = 0; }
        
            break;
        
        
        }
    
        /****************************************
        **  EN ESCALERA: Mirando a la derecha  **
        ****************************************/
        case 4:{
        
            // Cambia a "mirar a la izquierda" si presiona le tecla correspondiente.
            if( move_apenas_left == true ){ accion = 3; spr = 1; }
            
             // Cambia a "moverse hacia arriba" si presiona la tecla correspondiente.
            if( move_apenas_up == true ){ accion = 5; spr = 3; }
            
            // Cambia a "moverse hacia abajo" si presiona la tecla correspondiente.
            if( move_apenas_down == true ){ accion = 6; spr = 3; }
            
            // Si suelta la tecla que mantiene este estado, vuelve al que indica que está quieto.
            if( move_right == false ){ accion = 0; spr = 0; }
        
            break;
        
        }
        
        
        /****************************
        **  EN ESCALERA: Subiendo  **
        ****************************/
        case 5:{
        
            /* --- MOVIMIENTO --- */
            
            // Se pregunta si hay un objeto sólido por encima (en caso de serlo, deja de animarse y no se mueve., 
            if not ( place_meeting( x, y - 4, parent_plat_solido ) ){
            
                /* Se verifica si el jugador no está mayormente sobre la parte superior de la escalera para moverlo, en ese caso lo saca de la escalera
                y lo coloca justo por encima.*/
                if( !position_meeting( x, y, ob_escalera) and position_meeting( x, y + 16, ob_escalera) ){
                    
                    escalera_colocar_arriba_jug( instance_place(x, y + 4, ob_escalera) );
                    
                    break;
                
                }
                else{ y -= 3; }
                
            
            }
            else{
            
                /* Antes de detener al jugador se pregunta si lo que está arriba es una caja, de ser así se verifica si la mayor parte de
                la misma no está sobre la escalera. Si se cumple el último caso simplemente se mueve a la caja hacia donde tengan la mayor parte de su
                imágen y el jugador se posiciona en la parte superior, caso contrario el jugador deja de subir. */
                if( place_meeting(x, y - 4, ob_caja ) ){
                
                    var caja_id, caja_x, this_escalera, this_escalera, this_escalera_x;
                    
                    caja_id = ob_caja.id;
                    caja_x = caja_id.x + 16; // Se considera el centro de la caja.
                    this_escalera = instance_place(x,y,ob_escalera);
                    this_escalera_x = this_escalera.x;
                    
                    if( caja_x  &lt; this_escalera_x  ){
                    
                        caja_id.x = this_escalera_x - 32;
                        escalera_colocar_arriba_jug( this_escalera );
                        
                    }
                    else{
                    
                        var ancho_escalera_x = this_escalera_x + this_escalera.sprite_width;
                    
                        if( caja_x  &gt; ancho_escalera_x ){
                        
                            caja_id.x = ancho_escalera_x;
                            escalera_colocar_arriba_jug( this_escalera );
                        
                        }
                        else{
                        
                            accion = 0;
                            spr = 0;
                        
                        }
                    
                    }
                
                }
                else{
                
                    accion = 0;
                    spr = 0;
                    
                }
                
                break;
            
            }
        
            /* --- Interrupción de teclado --- */
            
            // Cambia a "mover hacia abajo" si presiona la tecla correspondiente
            if( move_apenas_down == true ){ accion = 6; break; }
            
            // Cambia a "mirar a la izquierda" si presiona le tecla correspondiente.
            if( move_apenas_left == true ){ accion = 3; spr = 1; break; }
            
            // Cambia a "mirar a la derecha" si presiona le tecla correspondiente.
            if( move_apenas_right == true ){ accion = 4; spr = 2; break; }
            
            // Si suelta la ecla que mantiene este movimiento, vuelva al estado que indica que está quieto.
            if( move_up == false ){ accion = 0; spr = 0; break; }
        
            break;
        
        }
        
        /***************************
        **  EN ESCALERA: Bajando  **
        ****************************/
        case 6:{
        
            /* --- MOVIMIENTO --- */
            
            /* Se pregunta si no hay un objeto sólido por debajo para moverse y luego se pregunta ademas si la mayor parte del personaje
            está sobre la escalera, caso contrario en el primero se coloca sobre el objeto sólido que esta debajo y en el otro casó simplemente
            se suelta.*/
            if not( place_meeting(x, y + 4, parent_plat_solido) ){
            
                /* Se verifica si el jugador no está mayormente sobre la parte superior de la escalera para moverlo, en ese caso lo saca de la escalera
                y lo coloca justo en la parte inferior.*/
                if( !position_meeting( x, y, ob_escalera) and position_meeting(x, y-16, ob_escalera) ){
                
                    y++ // Se baja un poco al jugador.
                    
                    en_escalera = false;
                    can_jump = true;
                    
                    accion = 0;
                    
                    break;
                
                }
                else{ y += 3; }
                
            }
            else{
            
                while( !place_meeting( x, y + 1, parent_plat_solido ) ){ y++; } // Se mueve al jugador hacia abajo hasta que esta justo sobre el suelo.
            
                en_escalera = false;
                can_jump = false;
                    
                accion = 0;
                spr = 0;
                    
                break;
            
            }
        
            // Cambia a "mover hacia arriba" si presiona la tecla correspondiente
            if( move_apenas_up == true ){ accion = 5; break; }
            
            // Cambia a "mirar a la izquierda" si presiona le tecla correspondiente.
            if( move_apenas_left == true ){ accion = 3; spr = 1; break; }
            
            // Cambia a "mirar a la derecha" si presiona le tecla correspondiente.
            if( move_apenas_right == true ){ accion = 4; spr = 2; break; }
            
            // Si suelta la ecla que mantiene este movimiento, vuelva al estado que indica que está quieto.
            if( move_down == false ){ accion = 0; spr = 0; break; }
        
            break;
        
        }
        
        
    }
    
    /*------------------------------------------------------------------------
    --      CONTROL DE ÚLTIMA TECLA VERTICAL (arriba / abajo) PRESIONADA    --
    ------------------------------------------------------------------------*/
    
    /* Se controla si no se tiene ninguna de las teclas usadas para moverse verticalmente (en la escalera), en el caso de ser así, se seleciona la
    que se tenga presionada dando prioridad a la de "arriba". Caso que no suceda lo anterior, se verifica si no se han soltado ambas...sino se
    verifica cual es la que se estaba presionando y se coloca la última que se presionó luego.*/
    if( last_key_v == 0){
    
        if( move_up == true ){ last_key_v = tecla_up;}
        else{
        
            if( move_down == true ){ last_key_v = tecla_down; }
        
        }
    
    }
    else{
    
        if( move_up == false and move_down == false ){ last_key_v = 0; }
        else{
           
           if( last_key_v == tecla_down and move_apenas_up == true){ last_key_v = tecla_up; }
           else{
            
            if( last_key_v == tecla_up and move_apenas_down == true  ){ last_key_v = tecla_down; }
                
           }
            
           
        
        }
    
    }
    
    /*--------------------------------------------------------------------
    --      Dejar la caja que se sostiene y control de interacción     --
    --------------------------------------------------------------------*/
    
    /* Se verifica si se tiene una caja y que se puede realizar alguna acción de interactuar (al haber soltado la tecla de interacción), se verifica que 
    se este presionando la tecla de interacción y si se cumple todo eso, se detiene al jugador y deja caer a caja delante suyo si hay espacio suficiente
    (en el caso de no haber espacio o estar en el aire, se señala que no se peude dejar la caja .*/
    if ( con_caja == true ){
        
        if ( can_interac == true ){
                
            if( uso_interac == true){
                
                can_interac = false; // Se señala que no se puede volver a interactuar hasta que se suelte la tecla correspondiente.
            
                /* Si el jugador no está en el aire, se hace lo necesario para ver si hay espacio suficiente para dejar la caja...caso contrario, se 
                muestra el pop-up que indica que no puede dejarla. */
                if( en_aire == false and vsp = 0){
                    
                    accion = 0;
                    impulso = 0;
                    hsp = 0;
                            
                    /* Se crea una variable temporal que según donde esté mirando el jugador toma valor positivo o negativo ( de esta manera se comprueba
                    rápidamente si por delante puede dejar la caja. */
                    var dir_dejar_caja = 1; 
                                    
                    if ( mirando != 0 ){ dir_dejar_caja = -1; } 
                                    
                    /* Se controla que haya espacio suficiente (ademas que no tenga una pared enfrente), caso contrario se fija si hay cierto espacio 
                    para ponerla igualmente y correr al jugador, ya si no se cumple todo eso se muestra el pop-up que indica que no se puede (se compara 
                    con la máscara de colisión del jugador que es la misma que la caja). */
                    if ( !place_meeting( x + ( 32 * dir_dejar_caja ), y - 2, parent_plat_solido ) and !place_meeting( x + (8 * dir_dejar_caja), y, parent_plat_solido) ){
                                ;
                        dejar_caja(dir_dejar_caja, 27, 20); // Función para señalar donde se deja la caja.
                        audio_play_sound( sn_caja_soltar, 1, false ); // Sonido al deja la caja.
                                        
                        show_popup = 0; // Se quita todo pop-up que hubiera.
                                    
                        // Se señala que se apunte a la caja en vez del punto de entrega
                        ob_punto_entrega.apuntar_flecha = 1;
                        
                    }
                    else{
                                
                        // Se verifica si hay al menos un pequeño espacio más adelante para dejar la caja, sino no se permite dejarla.
                        if ( !position_meeting( x + ( 32 * dir_dejar_caja ), y - 2, parent_plat_solido ) and !place_meeting( x + (8 * dir_dejar_caja), y, parent_plat_solido) and !place_meeting( x - (16 * dir_dejar_caja), y, parent_plat_solido ) ){
                                      
                            dejar_caja(dir_dejar_caja, 27, 20); // Función para señalar donde se deja la caja.
                            audio_play_sound( sn_caja_soltar, 1, false ); // Sonido al deja la caja.
                                            
                            show_popup = 0; // Se quita todo pop-up que hubiera.
                            
                            // Se señala que se apunte a la caja en vez del punto de entrega
                            ob_punto_entrega.apuntar_flecha = 1;
                                            
                        }
                        else{
                            
                            alarm[0] = -1;
                            show_popup = 2;              
                            alarm[0] = 40;
                            
                            // Si ya estaba sonando el sonido de dejar la caja, lo detiene. Sea o no así, luego el sonido mismo se reproduce.
                            if( audio_is_playing( sn_caja_negado ) ){ audio_stop_sound( sn_caja_negado ); }
                            audio_play_sound( sn_caja_negado, 1, false );
                                            
                        }
                                
                                
                    }
                
                }
                else{
                
                    alarm[0] = -1;
                    show_popup = 2;           
                    alarm[0] = 40;
                    
                    // Si ya estaba sonando el sonido de dejar la caja, lo detiene. Sea o no así, luego el sonido mismo se reproduce.
                    if( audio_is_playing( sn_caja_negado ) ){ audio_stop_sound( sn_caja_negado ); }
                    audio_play_sound( sn_caja_negado, 1, false );
                
                }
            
            }
                
        }
            
        
    
    }
    
    // Se controla si se suelta la tecla de interactuar para habilitar la posibilidad de poder interactuar de nuevo al presionarla.
    if( can_interac == false ){
    
        if ( soltar_interac == true ){ can_interac = true; }
    
    }
    
    /*--------------------------------------------
    -- Atravesar "cloud platforms" hacia abajo  --
    --------------------------------------------*/
    
    /* Cuando el jugador presiona "tecla_down" y apenas presiona "tecla_jump", si no esta en el aire y sobre una plataforma "ob_plat_cloud_static", 
    el jugador atraviesa hacia abajo dicha plataforma...pero primero se verifica si se puede bajar, caso contrario es que ya se esta atravesando 
    y se espera que no se esté colisionando más con ese objeto para habilitar que pueda hacerlo nuevamente. NOTA: No se considera esto cuando se está usando
    una escalera. */
    
    if ( can_bajar_plat == true and move_down == true and en_escalera == false and move_apenas_jump == true and en_aire == false ){
            
        if ( place_meeting( x, y + 1, ob_plat_cloud_static ) ){
                        
            /* En el caso que no se encuentre un "parent_plat_solido", el jugador baja normalmente, caso contrario se corre lo necesario en los bordes
            de cihos objetos para que baje normalmente y se ve visualmente bien (es como una ayuda).*/
            if not ( place_meeting( x, y + 1, parent_plat_solido ) ){
                            
                can_bajar_plat = false;
                                
                en_aire = true; // Se señala que el jugador comienza a estar en el aire
                                        
                y++; // Se coloca un pixel más abajo para que comience a colisionar el personaje con este objecto y asi atravesarlo.
                                
            }
            else{
                                
                /* Se verifica si debajo del centro del jugador esta la "cloud platform", de ser asi se localiza si el "parent_plat_solido" esta
                a la izquierda o a la derecha */
                if ( position_meeting(x, y + 18, ob_plat_cloud_static) ){                            
                
                    // Variable local usada para guarda el ID del "parent_plat_solido" que esta debajo para usar sus coordenadas.
                    var borde_abajo = instance_place(x, y + 1, parent_plat_solido);
                               
                    // Lado izquiedo
                    if ( position_meeting(x - 16, y + 18, parent_plat_solido) ){       
                
                        // Si no existe una caja o si existe, está esta lejos o a la izquierda del jugador, entonces se realiza la caida normalmente.        
                        if( instance_exists( ob_caja ) == false or ( distance_to_object( ob_caja ) &gt; 2 or ob_caja.x &lt; x ) ){
                                         
                            hsp = 0; // Se quita la velocidad horizontal para que no se mueva mas de lo necesario.
                            with(borde_abajo){ other.x = x + 32 * image_xscale + 10; }
                                                               
                            can_bajar_plat = false; // Se hace el resto para que atraviese el "cloud platform".                           
                            en_aire = true; // Se señala que el jugador comienza a estar en el aire
                            y++; // Se coloca un pixel más abajo para que comience a colisionar el personaje con este objecto y asi atravesarlo.
                                   
                        }                        
                    }
                    else{ // Lado derecho

                                                // Si no existe una caja o si existe, está esta lejos o a la derecha del jugador, entonces se realiza la caida normalmente.                     
                        if( instance_exists( ob_caja ) == false or ( distance_to_object( ob_caja ) &gt; 2 or ob_caja.x &gt; x ) ){
                                               
                            hsp = 0; // Se quita la velocidad horizontal para que no se mueva mas de lo necesario.
                            x = borde_abajo.x - 10;
                         
                            can_bajar_plat = false; // Se hace el resto para que atraviese el "cloud platform".                           
                            en_aire = true; // Se señala que el jugador comienza a estar en el aire
                            y++; // Se coloca un pixel más abajo para que comience a colisionar el personaje con este objecto y asi atravesarlo.   
                            
                        }
                                                   
                    }
                                                
                                        
                }
                                
                                
            }
                                
            can_jump = false; // No puede saltar hasta que suelte la tecla correspondiente.
                            
        }
        
        
    
    }
    else{
    
        if not ( place_meeting(x,y,ob_plat_cloud_static) ){
        
            can_bajar_plat = true;    
        
        }
    
    }
    
    /*---------------------
    -- CONTROL DE SALTO  --
    -----------------------*/
    
    /* Si está en el aire, se señala que la aceleración por mantener la tecla de salto deja de aumentar y hasta que toque el 
    suelo, por más que se presione nuevamente la tecla, no aumenta.*/
    if ( soltar_jump == true ){
    
        if( en_aire == true ){ still_jump = false; }
    
    }
    
    /* Si se presiona la tecla de saltar, se asigna la velocidad correspondiente y se señala que se está en el aire, pero
    antes se controla ciertas condiciones para poder hacerlo. Si estaba presionando teclas para moverse además, se hace
    un salto con impulso.*/
    if ( move_jump == true ){ 
    
        /* El salto se realiza cuando la velocidad vertical es cero (ya que estária en el suelo el jugador), caso contrario 
        se verifica si se puede acelerar la velocidad del salto poco a poco para darle al jugador mayor control.*/
        if ( vsp == 0 and can_jump == true and en_aire == false ){
        
            /* Si el jugador no está usando la escalera, se hace el salto normalmente...caso contrario, se considera hacia donde está mirando o
            simplemente se suelta.*/
            if (en_escalera == false ){
                
                if not ( place_meeting( x, y + vel_salto, parent_plat_solido ) ){ // Nota: se hace "+ vel_salto" que es una constante negativa. 
                    
                                    
                    can_jump = false;
                    en_aire = true; 
                                    
                    vsp = vel_salto;
                                
                    // Se verifica si fue con impulso.
                    if ( last_key_h != 0 ){ 
                                    
                        switch( last_key_h ){
                        
                            case ( tecla_right ):{ impulso = vel_h - 2; break; } 
                            case ( tecla_left ):{ impulso = -vel_h + 2; break; } 
                        
                        }
                    
                                        
                    }
                    
                    
                    // Se señala que temporalmente no puede usarse la escalera
                    alarm[1] = -1;
                    can_escalera = false;
                    alarm[1] = 10;
                    
                    //[SONIDO] Se preoduce el correspondiente al salto
                    audio_sound_pitch( sn_jug_salto, 0.8 + random( 0.4 ) );
                    audio_play_sound(sn_jug_salto, 2, false);   
                                
                }
                else{
                            
                    can_jump = false; // No puede saltar hasta que suelte la tecla correspondiente.
                            
                }
                    
            }
            else{
                    
                // Para evitar problemas, el momento de soltarse debe ser cuando justo presiona la tecla de salto.
                if( move_apenas_jump == true ){
            
                    /* Se considera en que estado de "acción" esta el jugador para saber si tiene que saltar a la derecha, la izquierda o simplemente
                    soltarse. */
                    switch(accion){
                                
                        //---- Está quieto o subiendo o bajando la escalera (el jugador se suelta de la misma).
                        case 0: case 5: case 6: {
                                        
                            en_escalera = false;
                                            
                            can_jump = false;
                            en_aire = true; 
                            
                            accion = 0;
                            
                            // Se señala que temporalmente no puede usarse la escalera
                            alarm[1] = -1;
                            can_escalera = false;
                            alarm[1] = 10;
                                                
                            break;
                                            
                        }
                        
                        //---- Salta para el lado izquierdo (si hay espacio suficiente, sino se suelta directamente).
                        case 3:{
                        
                            var little_impulso, little_salto; /* NOTA: "little_impulso" es siempre positivo (luego se cambia segun la dirección),
                            "little_salto" es negativo porque "vel_salto" lo es. "*/
                            
                            little_impulso = (vel_h - 2);
                            little_salto = (vel_salto + 1);
                            
                        
                            // Se controla si hay espacio hacia donde va a hacer el impulso, caso contrario se suelta.
                            if not( place_meeting( x - little_impulso , y + little_salto, parent_plat_solido) ){
                            
                                x -= 4;
                            
                                // Se aplica el movimiento
                                impulso = - little_impulso ;
                                vsp = little_salto;
                                
                                accion = 1;
                            
                            }
                            else{ 
                            
                                accion = 0; 
                                
                            }
                            
                            // Se señala que ya no está mas sobre la escalera.
                            en_escalera = false;
                                            
                            can_jump = false;
                            en_aire = true; 
                            
                            
                            // Se señala que temporalmente no puede usarse la escalera
                            alarm[1] = -1;
                            can_escalera = false;
                            alarm[1] = 10;
                                         
                            //[SONIDO] Se preoduce el correspondiente al salto
                            audio_sound_pitch( sn_jug_salto, 0.8 + random( 0.4 ) );
                            audio_play_sound(sn_jug_salto, 2, false); 
                            
                            break;
                            
                        
                        }
                        
                        //---- Salta para el lado derecho (si hay espacio suficiente, sino se suelta directamente).
                        case 4:{
                        
                            var little_impulso, little_salto; /* NOTA: "little_impulso" es siempre positivo (luego se cambia segun la dirección),
                            "little_salto" es negativo porque "vel_salto" lo es. "*/
                            
                            little_impulso = (vel_h - 2);
                            little_salto = (vel_salto + 1);
                            
                            // Se controla si hay espacio hacia donde va a hacer el impulso, caso contrario se suelta.
                            if not( place_meeting( x + little_impulso, y + little_salto, parent_plat_solido) ){
                            
                                x += 4;
                            
                                // Se aplica el movimiento
                                impulso = little_impulso;
                                vsp = little_salto;
                                
                                accion = 2;
                            
                            }
                            else{ 
                            
                                accion = 0; 
                                
                            }
                        
                            // Se señala que ya no está mas sobre la escalera.
                            en_escalera = false;
                                            
                            can_jump = false;
                            en_aire = true; 
                            
                            
                            // Se señala que temporalmente no puede usarse la escalera
                            alarm[1] = -1;
                            can_escalera = false;
                            alarm[1] = 10;    
                            
                            //[SONIDO] Se preoduce el correspondiente al salto
                            audio_sound_pitch( sn_jug_salto, 0.8 + random( 0.4 ) );
                            audio_play_sound(sn_jug_salto, 2, false); 
                            
                            break;
                        
                        }
                    }
                    
                }   
            
            }
            
        }
        else{
            
            /* Si está en el aire y su velocidad vertical es hacia arriba, se verifica que no haya soltado la tecla y luego
            que no supere la velocidad de salto máxima establecida, si no ocurre esto último se desactiva la aceleración
            vertical.*/
            if( en_aire == true and vsp &lt; 0 and still_jump == true ){
                    
                if( vsp &gt; vel_salto_max ){
                                
                    vsp -= ace;
                                
                }
                else{
                            
                    still_jump = false;
                            
                }
                    
            
            }
            
        }
                
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gravedad, velocidades y colisiones


    mirando = spr mod 2; // Señala hacia que lado esta mirando el jugador ( 0 = derecha; 1 = izquierda ).

    /* Como se usa mucho el signo de unidad de la velocidad horizontal y vertical del juegador, se crea esta variable local
    para mayor eficacia. */
    
    var signo_vel_h, signo_vel_v;
        
     /*----------------------------------
     - Colisión y movimiento horizontal -
     -----------------------------------*/
        
        signo_vel_h = sign(hsp); // Se verifica que signo tiene la velocidad horizontal.
        
        // Si no hay velocidad horizontal, se tiene en cuenta la del impulso al saltar para colisionar correctamente.
        if ( impulso != 0 ){ signo_vel_h = sign(impulso); }
        
     
        /* Lo siguiente solo ocurre si tiene una velocidad horizontal "hsp" o si tiene alguna velocidad de "impulso".*/
        if ( hsp != 0 or impulso != 0  ){
        
            /* Si no habia impulso y la velocidad horizonal es cero, se coloca el valor según la tecla de moviento (derecho o izquierdo) que se esté
            presionando.*/    
            if ( signo_vel_h == 0 ){
            
                if ( move_right == true ){ signo_vel_h = 1; }
                else{ 
                
                    if ( move_left == true ) { signo_vel_h = -1; }
                
                }
            
            }    
        
             /* Efecto de fricción cuando el jugador tiene una velocidad horizontal y deja presionar las teclas para moverse de un lado al otro cuando está
            en el suelo */
            if ( accion == 0 ){
            
                if ( en_aire == false ){ hsp += ace * signo_vel_h * (-1); }
            
            }
            
            
            //----- Se detecta la colisión en la dirección que iba.
            
            if ( place_meeting( x + hsp + impulso + ( 1 * signo_vel_h ), y, parent_plat_solido ) ){
                
                       
                // Se reduce todo el espacio posible que habia entre un "parent_plat" y el jugador.
                while ( !place_meeting( x + ( 0.5 * signo_vel_h ), y, parent_plat_solido ) ){ x += ( 0.5 * signo_vel_h ); }
                
                // Se quita la velocidad horizontal  (sea de "hsp" o "impulso")
                hsp = 0;
                impulso = 0;
                
                /* Si su velocidad no es cero, se comprueban dos posibles casos: que si iba a la izquierda justo al chocar estaba presionando
                la tecla en el sentido opuesto, se coloca el estado "accion" en cero...para la derecha lo mismo. Esto permite un mayor control luego
                con el sprite para saber que el jugdor por mas que esté presionando contra una pared, el movimiento del sprite es de estar quieto. */ 
                if( signo_vel_h != 0 ){
                
                    if ( ( signo_vel_h &gt; 0 and last_key_h != tecla_left ) or ( signo_vel_h &lt; 0 and last_key_h != tecla_right ) ){
                    
                        accion = 0;
                    
                    }
                
                }
                
                    
            }
            
            
        }
        
        
        
        /* Se da una "ayuda" cuando colisione con la esquina de un "parent_plat" (mientras esté en el aire y cayendo), colocandolo luego encima 
        de la plataforma que tiene enfrente en la dirección de tecla que esté presionando (se pone en prioridad la ultima presionada, si estaba quieto
        con "accion == 0", se toma en cuenta la primera que se presiona). NOTA: Tiene que estar "can_bajar_plat" activado ya que el jugador quiso 
        ir hacia abajo en las "ob_plat_static_cloud".*/
        if ( en_aire == true ){
                    
            if ( vsp &gt;= 0 ){
                 
                if ( can_bajar_plat == true  ){
                    
                    // Del lado izquierdo
                    if( ( last_key_h == tecla_left ) or ( accion == 0 and move_left == true ) ){      
                    
                        if ( place_meeting( x - 2, y, parent_plat_solido ) ){
                                    
                            // Se crea una variable temporal que guarda el ID del parent_plat que tiene enfrente para usar sus parámetros.
                            var borde_pared = instance_place( x - 1, y, parent_plat_solido);
                                    
                            /* Se verifica que el centro del jugador este sobre la parte superior del otro objeto, para tener un
                            límite hasta cuando puede hacerlo. */ 
                            if( y &lt; ( borde_pared.bbox_top - 2) ){     
                                                     
                                // Se verifica que en la posición que vaya a estar no hay otro objeto sólido como una pared o una caja.
                                if not ( place_meeting( x - 6, ( borde_pared.bbox_top - 16 ), parent_plat_solido ) ){
                                                                            
                                    // Se posiciona el jugador en la parte superior del borde la plataforma que colisiona.
                                    y = borde_pared.bbox_top - 16;
                                    x -= 6;   
                                    
                                    accion = 1; // Se coloca el estado de que se está llendo hacia la izquierda.
                                
                                }
                                                
                            }
                                
                        }
                                                
                    }
                    
                    //Del lado derecho
                    if( ( last_key_h == tecla_right ) or ( accion == 0 and move_right == true ) ){
                        
                        if( place_meeting( x + 2, y, parent_plat_solido ) ){
                                
                            // Se crea una variable temporal que guarda el ID del parent_plat que tiene enfrente para usar sus parámetros.
                            var borde_pared = instance_place( x + 1, y, parent_plat_solido);
                                            
                            /* Se verifica que el centro del jugador este sobre la parte superior del otro objeto, para tener un
                            límite hasta cuando puede hacerlo. */ 
                            if ( y &lt; ( borde_pared.bbox_top - 2) ){
                                      
                                // Se verifica que en la posición que vaya a estar no hay otro objeto sólido como una pared o una caja.     
                                if not ( place_meeting( x + 6, borde_pared.bbox_top - 16, parent_plat_solido ) ){
                                     
                                    // Se posiciona el jugador en la parte superior del borde la plataforma que colisiona.
                                    y = borde_pared.bbox_top - 16;
                                    x += 6;
                                                    
                                    accion = 2; // Se coloca el estado de que se está llendo hacia la derecha.
                                
                                }
                                        
                            }
                                 
                        }
                        
                    }
                    
                    
                
                }                
                            
            }
            
        }
        
        // Mueve al personaje horizontalmente.
        x += ( hsp + impulso ); 
        
    /*------------------------------- 
    - Gravedad y colisión vertical. -
    --------------------------------*/
        
    
        signo_vel_v = sign(vsp); // Se verifica que signo tiene la velocidad vertical.
        
        /* Si no hay velocidad, "sign(vsp)" devuelve cero...para solventar errores, se le asigna "1" a ese caso. Caso contrario,
        se señala que está en el aire y se aplica lo necesario para el efecto de gravedad.*/
        if ( signo_vel_v == 0 ) { signo_vel_v = 1; }
        
            /* Si no se está usando una escalera, se aplica el efecto de gravedad y colisiones necesarias...caso contrario se toman las cosas de otra
            manera. */
            if( en_escalera == false ){
            
                /* Se verifica si hay alguna plataforma relacionada con "parent_plat" en la dirección que va el personaje y que no este sobre un "parent_plat_cloud",
                caso contrario, se señala que está en el aire y se aplica lo necesario de la gravedad.*/
                if ( place_meeting(x, y + vsp  + ( 2.5 * signo_vel_v), parent_plat)  ){
                
                    if ( !place_meeting(x,y, parent_plat_cloud) ){
                    
                        var plat_id = 0; /* Variable local que guarda el ID de un "parent_plat_solido", si no es de ese
                        tipo tiene valor "cero" (solo interesa cuando el personaje esta subiendo, caso contrario permanece en cero). */
                        
                        /* Si la dirección del jugador es positiva (hacia abajo) se señala que ya no está en el aire y el impulso se 
                        reduce a cero (tambien se setea "plat_id" en cero). Caso contrario, se verifica si esta en un borde de un techo 
                        (ya que esta llendo hacia arriba) y lo coloca justo al lado en caso de ser cierto (a menos que sea un 
                        "parent_plat_cloud".*/
                        if ( signo_vel_v == 1 ){
                        
                            // Si está en el aire, mientras haya un pequeño espacio hacia el "parent_plat", se reduce
                            if ( en_aire == true ) { while ( !place_meeting(x, y + 0.5, parent_plat) ) { y += 0.5; } }
                            
                            
                            en_aire = false;
                            still_jump = true;
                            impulso = 0;
                            
                            plat_id = 0;
                            
                            // Si el jugador suelta la tecla de saltar, permite que realice de nuevo el salto.
                            if( move_jump == false ){ can_jump = true; }
                            
                        }
                        else{
                       
                            // Se guarda el ID del objeto que se esta colisionando para ver si el jugador necesita ayuda alguna.
                            var plat_id = instance_place( x, y - 20, parent_plat);
                        
                
                            /* Si el objeto que se colisiona es hijo del tipo "parent_plat_solido" se toman las acciones adecuadas, caso contrario es un "parent_plat_cloud" que
                            se puede atravesar ( por lo que "plat_id" se setea a cero) */
                            if ( plat_id != noone and object_is_ancestor(plat_id.object_index, parent_plat_solido) ) {
                            
                                // Si está en el aire, mientras haya un pequeño espacio hacia el "parent_plat", se reduce
                                if ( en_aire == true ) { while ( !place_meeting(x, y - 0.5, parent_plat) ) { y -= 0.5; } }
                            
                                /* Se verifica que arriba del punto medio del jugador no haya un "parent_plat_solido" y luego se verifca si es el borde derecho o el izquierdo,
                                si alguno es correcto se coloca el jugador en el borde correspondiente "ayudando" al jugador, caso contrario se deja en cero la variable
                                local "plat_id" para señalar que se debe anular la velocidad vertical.*/
                                if not( position_meeting( x, y - sprite_height - 8, parent_plat_solido ) ){
                                
                                    // Borde izquierdo
                                    if ( !position_meeting( x - 2, y - 24, parent_plat_solido ) and ( x &lt;= plat_id.bbox_left ) ){ 
                                    
                                        //Se compensa la altura reduciendo un poco la velocidad vertical y se coloca al jugador donde corresponde.
                                        vsp += grav;
                                        x = plat_id.bbox_left - 6; 
                                        
                                        // Si llega estar colisionando con una caja al "colocar" al jugador, se lo mueve para dar espacio.
                                        if( place_meeting(x, y, ob_caja) ){
                                        
                                            while( place_meeting(x, y, ob_caja) ){ ob_caja.x -= 0.5; }
                                        
                                        }
                                        
                                    }
                                    else{
                                    
                                        // Borde derecho
                                        if ( !position_meeting( x + 2, y - 24, parent_plat_solido ) and ( x &gt; ( plat_id.bbox_right + 1 ) ) ){ 
                                        
                                            //Se compensa la altura reduciendo un poco la velocidad vertical y se coloca al jugador donde corresponde.
                                            vsp += grav;
                                            x = plat_id.bbox_right + 7; 
                                            
                                            // Si llega estar colisionando con una caja al "colocar" al jugador, se lo mueve para dar espacio.
                                            if( place_meeting(x, y, ob_caja) ){
                                        
                                                while( place_meeting(x, y, ob_caja) ){ ob_caja.x += 0.5; }
                                        
                                            }
                                            
                                        }
                                        else{
                                        
                                            plat_id = 0;
                                        
                                        }
                                        
                                    }
                                
                                }
                                else{
                                
                                    plat_id = 0;
                                
                                }
                            
                            }
                            else{
                            
                                //Si colisionó con un "parent_plat_cloud", se compensa la altura reduciendo la velocidad vertical con la gravedad.
                                vsp += grav;
                            
                            }
                            
                            
                        }
                        
                        
                        
                        // Si el techo con el que colisionó no es un borde, entonces la velocidad vertical señalada por "vsp" se reduce a cero.
                        if ( plat_id == 0 ){  vsp = 0; }
                    
                    
                }
                else{ //------EN EL CASO DE QUE COLISIONA CON UN "CLOUD PLATFORM"
                    
                    /* Si se está colisionano con un "parent_plat_cloud", se verifica si la dirección de la velocidad es positiva, de
                    no ser así, directamente se realiza las acciones de gravedad (ya que no importa si esta arriba). */
                    if ( signo_vel_v == 1 ){
                    
                        /* Si hay un "parent_plat_solido" (un suelo solído) en la dirección hacia abajo que iba el jugador, se pone encima 
                        de la misma y se setea todo lo necesario para que indicar que el jugador no está en el aire*/
                        if ( place_meeting( x, y + vsp + 1, parent_plat_solido ) ){
                        
                            while ( !place_meeting(x, y + 0.5, parent_plat_solido) ) { y += 0.5; } 
                            
                            en_aire = false;
                            still_jump = true;
                            impulso = 0; 
                            
                            vsp = 0; // La velocidad vertical vuelve a cero. 
                            
                            // Si el jugador suelta la tecla de saltar, permite que realice de nuevo el salto.
                            if( move_jump == false ){ can_jump = true; }
                        
                        }
                        else{
                        
                             /* Se controla que el objeto tipo "parent_plat_cloud" sea una plataforma movil vertical y que este un poco atrevansandolo, de ser así,
                            lo coloca justo encima y hace las acciones necesarias (esto está para poder solucionar un leve error que al caer encima cuando sube, el
                            jugador lo atraviesa). Caso contrario, hace las acciones de gravedad necesarias.*/
                            var plat_cloud_id = instance_place( x, y, parent_plat_cloud );
                        
                            if( instance_place(x, y, parent_plat_cloud).object_index == ob_plat_movil_v and  (y + 12) &lt; plat_cloud_id.y ){
                            
                                y = plat_cloud_id.y - 16;
                                en_aire = false;
                                still_jump = true;
                                impulso = 0; 
                            
                                vsp = 0; // La velocidad vertical vuelve a cero. 
                            
                                // Si el jugador suelta la tecla de saltar, permite que realice de nuevo el salto.
                                if( move_jump == false ){ can_jump = true; }
                            
                            }
                            else{
                            
                                en_aire = true;
                                
                                // Se modifica la velocidad vertical según los datos actuales que afectan a la caida.
                                vsp = efecto_gravedad( vsp, grav, still_jump );
                            
                            }
                        
                        }
                    
                    }
                    else{
                        
                        /* Se comprueba el caso especial en que justo arriba hubiera un techo solido (esto sucede especialmente con las escaleras en 
                        su parte superior), si no hay techo simplemente se aplica la gravedad normalmente.*/
                        if( place_meeting(x, y + vsp , parent_plat_solido) ){
                        
                            // Se guarda el ID del objeto que se esta colisionando para ver si el jugador necesita ayuda alguna.
                            var plat_id = instance_place( x, y - sprite_height, parent_plat_solido);
                        
                             /* Se verifica que arriba del punto medio del jugador no haya un "parent_plat_solido" y luego se verifca si es el borde derecho o el izquierdo,
                             si alguno es correcto se coloca el jugador en el borde correspondiente "ayudando" al jugador, caso contrario se deja en cero la variable
                             local "plat_id" para señalar que se debe anular la velocidad vertical.*/
                             if not( position_meeting( x, y - sprite_height - 8, parent_plat_solido ) ){
                                
                                // Borde izquierdo
                                if ( !position_meeting( x - 2, y - 24, parent_plat_solido ) and ( x &lt;= plat_id.bbox_left ) ){ 
                                    
                                    //Se compensa la altura reduciendo un poco la velocidad vertical y se coloca al jugador donde corresponde.
                                    vsp += grav;
                                    x = plat_id.bbox_left - 6; 
                                                 
                                    // Si llega estar colisionando con una caja al "colocar" al jugador, se lo mueve para dar espacio.
                                    if( place_meeting(x, y, ob_caja) ){
                                        
                                        while( place_meeting(x, y, ob_caja) ){ ob_caja.x -= 0.5; }
                                        
                                    }
                                        
                                }
                                else{
                                    
                                    // Borde derecho
                                    if ( !position_meeting( x + 2, y - 24, parent_plat_solido ) and ( x &gt; ( plat_id.bbox_right + 1) ) ){ 
                                        
                                        //Se compensa la altura reduciendo un poco la velocidad vertical y se coloca al jugador donde corresponde.
                                        vsp += grav;
                                        x = plat_id.bbox_right + 7; 
                                            
                                        // Si llega estar colisionando con una caja al "colocar" al jugador, se lo mueve para dar espacio.
                                        if( place_meeting(x, y, ob_caja) ){
                                        
                                            while( place_meeting(x, y, ob_caja) ){ ob_caja.x += 0.5; }
                                        
                                        }
                                            
                                    }
                                    else{
                                        
                                        plat_id = 0;
                                        
                                    }
                                        
                                }
                                
                             }
                             else{
                                
                                plat_id = 0;
                                
                             }
                                
                             /* Si el techo con el que colisionó no es un borde, entonces la velocidad vertical señalada por "vsp" se reduce a cero y 
                             se coloca al jugador pegado contra el techo su parte superior.*/
                             if ( plat_id == 0 ){  
                                
                                vsp = 0;  
                                while( !place_meeting(x, y - 0.5, parent_plat_solido) ){ y -= 0.5; }  
                                    
                             }
                        
                        }
                        else{
                        
                            en_aire = true;
                                
                            // Se modifica la velocidad vertical según los datos actuales que afectan a la caida.
                            vsp = efecto_gravedad( vsp, grav, still_jump );
                    
                            
                        }
                            
                    }
                
                    
                    
                }
            
            
            }
            else{
                
                en_aire = true;
                            
                // Se modifica la velocidad vertical según los datos actuales que afectan a la caida.
                vsp = efecto_gravedad( vsp, grav, still_jump );
                
                
            }
        
        }
         
        // Mueve el personaje verticalmente con la velocidad vertical que tenga.
        y += vsp; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sobre una caja que está moviéndose.

    /* Se verifica primero que el jugador no este sobre una plataforma móvill (guardada en "plat_movil_id") y luego si hay una caja debajo se ve si
    se mueve con una platorma móvil, para que de esa manera el movimiento sea relativo a la caja.*/
    if ( plat_movil_id == 0 ){
        
        // Se comprueba si hay debajo una caja.
        if( place_meeting( x, y + 5, ob_caja) ){
        
            // Se copia el valor "plat_movil_id" de la caja al jugador.
            plat_movil_id = instance_place(x, y + 5, ob_caja).plat_movil_id;
             
            // Si tiene un "ID" guardado de una plataforma móvil, se guarda el ID del jugador a esa plataforma móvil.           
            if ( plat_movil_id != 0 ){
                        
                with(plat_movil_id){ move_jug = other.id;  }
                        
            }
            
        }
        
        

    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interacción con la caja y objetos de uso.

/* Para poder interactuar con los objetos de uso o la caja, se debe estar en el suelo (caso contario, se quita cualquier pop-up). Además, se controla 
primero si se está cerca de una caja (para darle prioridad), caso contrario se verifica con los objetos de uso. */
if( en_aire == false and distance_to_object(ob_caja) &lt; 4 ){
    
    
    /* Se verifica que el jugador no esté ya agarrando la caja y que este por debajo de la parte superior de la misma, caso contrario se quita
    cualquier pop-up.*/
            
    var altura_caja = ob_caja.y;
            
    if( con_caja == false and ( y &gt; altura_caja ) and y &lt; ( altura_caja + 32 )){
            
            // La caja no puede esta en el aire, debe estar sobre el suelo o una plataforma móvil.
            if( ob_caja.vsp == 0 ){
                
                /* Se vefica si el jugador esta a la derecha o a la izquierda del objeto y, dependiendo del sprite, hacia donde está mirando. Si no
                cumple con estas condiciones, se quita el pop-up que estuviere, caso contrario se señala que se muestre el pop-up que indica que hay
                una interacción posible.*/
                    
                // Está del lado izquierdo y mirando a la derecha o del lado derecho y mirando a la izquierda.
                if ( ( x &lt; ob_caja.x and mirando == 0 ) or ( x &gt; ob_caja.x and mirando == 1 ) ){ show_popup = 1;}
                else{
                        
                        show_popup = 0;
                    
                }
                    
                /* Si se está mostrando el pop-up de interacción y se presiona la tecla correspondiente, se hace todo lo necesario para mostrar que el 
                jugador ahora lleva la caja.*/
                if ( show_popup == 1 and uso_interac == true and can_interac == true ){
            
                    // Se cambia el estado en que apunta la flecha del punto de entrega
                    with( ob_punto_entrega ){ apuntar_flecha = 0; }
                
                    // Se cambia el estado de uso de la caja, se guarda el ID del jugador en uno de sus atributos y se coloca la misma sobre el jugador.
                    with(ob_caja){
                                
                        y = other.y - 48
                                
                        usando = true;
                        jug_id = other.id;
                                
                    }
                            
                    agregar_altura = 16;
                    con_caja = true;
                    can_interac = false; // No se deja interactuar con otro objeto hasta que suelte la tecla.
                    show_popup = 0; // Se saca cualquier pop-up que hubiera.
                    
                    /* Se verifica si no está sonando el sonido de soltar la caja o cuando no se puede, de ser asi se detienen los mismos y luego suena
                    el que corresponde a agarrar la caja. */
                    if( audio_is_playing(  sn_caja_negado ) ){ audio_stop_sound( sn_caja_negado ); }
                    else{
                    
                        if( audio_is_playing( sn_caja_soltar ) ){ audio_stop_sound( sn_caja_soltar ); }
                    
                    }
                    
                    audio_play_sound( sn_caja_agarrar, 1, false ); 
                    
                    
                }
                    
            
            }
                
    }
    else{ 
            
        // Si el "pop-up" que se muestra es el de interacción, se deshabilita.
        if( show_popup == 1 ){ show_popup = 0; }
            
    }
    
}
else{
    
    // Si no se está cerca de ningun objeto para interactuar, se quita cualquier pop-up.
    if ( show_popup == 1 ){ show_popup = 0; }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interacción con escalera que esta debajo.


    /* Se controla que se esté presionando la tecla hacia abajo y que la distancia a una escalera sea pequeña (sin estar en la misma u otra). De cumplirse
    lo anterior, se obtiene el "ID" de esa escalera y se verifica que este dentro de los limites el centro del jugador para así colocarlo encima y señalar
    que la esta usando.*/
    if( last_key_v == tecla_down and distance_to_object(ob_escalera) == 1 and en_escalera == false ){
    
        // Se usa la escalera si no se tiene una caja, caso contrario se muestra un pop-up que señala que no se puede usar por ese motivo
        if( con_caja == false){
    
            var escalera_debajo = instance_place(x, y + 4, ob_escalera);
         
            if( escalera_debajo != noone and ( y + 15) &lt;= escalera_debajo.y  ){
            
                var ox = escalera_debajo.x;
                
                if( ( x &lt;= ( ox + 36 ) and x &gt;= ( ox - 4)  ) ){
                    
                    /* Se verifica si sobre la escalera hay una caja, en ese caso se controla si la parte parte de la misma ocupa ese lugar, caso contrario
                    el jugador se posiciona sobre la escalera. */
                    if( place_meeting( ox + 16, escalera_debajo.y - 5, ob_caja) ){
                    
                        /* En el caso que la mayor parte de la caja este sobre la escalera, no se deja al jugador subirse...caso contrario, se mueve la caja
                        en el sentido donde se encuentra esa mayor parte.*/
                        
                        var caja_id, caja_centro_x;
                        caja_id = ob_caja.id;
                        caja_centro_x = ob_caja.x + 16; 
                        
                        if( caja_centro_x &lt; ox ){
                        
                            caja_id.x = ox - 32;
                            
                            // Se coloca al jugador sobre la escalera.
                            posicionamiento_escalera(escalera_debajo);
                            accion = 0;
                        
                        }
                        else{
                        
                            var escalera_ancho_posicion = ox + escalera_debajo.sprite_width;
                        
                            if( caja_centro_x &gt; escalera_ancho_posicion ){
                            
                                caja_id.x = escalera_ancho_posicion;
                                
                                // Se coloca al jugador sobre la escalera.
                                posicionamiento_escalera(escalera_debajo);
                                accion = 0;        
                            
                            }
                        
                        }
                        
                    
                    }
                    else{
                        
                        // Se coloca al jugador sobre la escalera.
                        posicionamiento_escalera(escalera_debajo);
                        accion = 0;
                    
                    }
                    
                
                }
            
            }
        
        }
        else{
        
            // Se muestra pop-up de que no se puede usar la escalera porque se tiene una caja.
            alarm[0] = -1;
            show_popup = 2;
                                        
            alarm[0] = 40;
        
        
        }
    
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sobre plataformas móviles

    /* Si el jugador no está en el aire y la variable que guarda el "id" de las plataformas móviles es cero, se verifica si hay alguna cerca y de ser
    asi que la misma este debajo y que el el centro del jugador no este sobre un suelo estático ("ob_plat_wall"), en caso que no suceda lo primero o lo
    último, se vuelve al estado base (todo cero) de que no está sobre una plataforma móvil, sino se guarda el "id" y se señala que esa plataforma mueva al
    jugador */
    if ( en_aire == false ){
    
        if( plat_movil_id == 0 ){
        
            if (  distance_to_object( parent_plat_movil ) &lt;= 16 ){
            
                if ( place_meeting( x, y + 1, parent_plat_movil ) ){
                
                    if not( position_meeting( x, y + 17, ob_plat_wall ) ){
                    
                        plat_movil_id = instance_place( x, y + 3, parent_plat_movil );
                        
                        // Se verifica que el jugador este por encima de la plataforma móvil.
                        if( plat_movil_id != noone and y + 15 &lt; plat_movil_id.y ){ /* Nota: el valor "noone" para "plat_movil_id" se usa en "html5" 
                        para las plataformas móviles, ya que puede atravesar al personaje desde arriba para abajo no se quiere que el jugador lo siga
                        por lo que se guarda un valor "noon" y esto no puede ser usado de forma comparativa (genera error), por lo que se verifica
                        primero si realmente hay un "parent_plat_movil" guardado...caso contrario el valor "noone" se setea a cero.*/
                        
                        
                            /* Para la plataforma vertical móvil se tienen en cuentras otras situaciones, como el caso que este el jugador parado sobre 
                            un suelo sólido y se ve si la velocidad de la plataforma es positiva, en ese caso lleva al jugador consigo...caso contrario 
                            se verifica que la mayor parte del jugador este sobre la plataforma móvil, haciendo que se corra lo necesario para no atravesar
                            el suelo sólido. En los casos contrarios, directamente se señala a la plataforma móvil que lleve al jugador.*/
                            if( plat_movil_id.tipo == 1 ){
                            
                                if ( place_meeting(x, y + 1, ob_plat_wall) ){
                                
                                    if ( plat_movil_id.vsp &lt; 0 ){
                                    
                                        with(plat_movil_id){ move_jug = other.id; } // Se señala a la plataforma movil que mueva al jugador (usando su ID)
                             
                                    }
                                    else{
                                    
                                        // Se va al estado base de que no esta sobre alguna plataforma móvil.
                                        plat_movil_id = 0;
                                    
                                    }
                                
                                }
                                else{
                                
                                    with(plat_movil_id){ move_jug = other.id; } // Se señala a la plataforma movil que mueva al jugador (usando su ID)
                               
                                }
                                
                            }
                            else{ // En el caso de una plataforma horizontal móvil.
                            
                                with(plat_movil_id){ move_jug = other.id; } // Se señala a la plataforma movil que mueva al jugador (usando su ID)
                     
                            }
                            
                        
                        }
                        else{
                        
                            // Se va al estado base de que no esta sobre alguna plataforma móvil.
                            plat_movil_id = 0;
                        
                        }
                            
                    }
                    else{
                    
                        // Se va al estado base de que no esta sobre alguna plataforma móvil.
                        plat_movil_id = 0;
                    
                    }
                
                }
            
            }
        
        }
        else{
        
            /* Se verifica primero que debajo del centro del jugador no haya una caja ni un suelo estático ("ob_plat_wall"), en el caso que sea así se 
            va al estado base cuando no se está sobre una plataforma móvil.*/
            
            if not ( place_meeting( x, y + 2, ob_caja ) ){
            
                if ( position_meeting( x, y + 20, ob_plat_wall ) ){
            
                    plat_movil_id.move_jug = 0; // Esto es para para señalar que dejen de mover al jugador.
                    
                    plat_movil_id = 0;
                
                }
            
            }
        
        }
    
    }
    else{
    
        // Si estaba sobre una plataforma móvil, a la misma se indica que ya no debe mover al jugador (además de indicar que ya no está sobre esa plataforma).
        if( plat_movil_id != 0 and distance_to_object(plat_movil_id) &gt; 8 ){
        
            plat_movil_id.move_jug = 0; 
            plat_movil_id = 0;
        
        }
    
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control del manejo de sprite y pop-ups restantes.
//en aire, arriba / abajo

//--- Pop-ups

    /* Si está activado el pop-up de que falta la caja para terminar el nivel pero se alejo de la zona de entrega, entonces se quita ese pop-up.
    Lo mismo se hace con el pop-up de presionar la tecla hacia arriba para terminar el nivel*/
    if( ( show_popup == 3 or show_popup == 4 ) and distance_to_object(ob_punto_entrega) &gt; 10 ){ show_popup = 0; }

//--- Sprite
    
/* El siguiente manejo de sprite se realiza cuando el jugador no está usando una escalera (debido que ahí hay muchas variacioens) y se puede controlar
al jugador, caso contrario, ese manejo se hace antes en este evento cuando se controla las acciones del teclado.*/
if( en_escalera == false and controlar == true){

        // Se considera el signo de la velocidad horizontal para establecer que sprite será necesario.
        switch( signo_vel_h ){
        
            // Quieto
            case 0: {
            
                /* Se controla si el estado es cero para así saber que esto ocurre solo cuando se deja de presionar las teclas o se colisiono con algo (caso
                contrario, al cambiar de dirección, se pasaria por la velocidad cero y se vería visualmente feo - como que se detiene por un momento).*/
                if( accion == 0 ){
                
                    if( mirando == 0 ){ spr = 0; }
                    else{ spr = 1; }
                    
                }
                
                if( move_apenas_right == true ){ spr = 0; }
                else{ 
                    
                    if( move_apenas_left == true ){ spr = 1;}
                    
                }
                
                break;
            
            }
            
            // A la derecha (positivo)
            case 1: {
            
                /* En el caso que la velocidad sea hacia la derecha y no se está en el estado cero de acción (cuando no se
                presiona tecla alguna), se controla luego segun cual fue la última tecla de movimiento horizontal que se
                presionó para saber hacia donde "encarar" al jugador. */
                if( accion != 0 ){ 
                
                    if( last_key_h != tecla_left ){ spr = 2; }
                    else{ spr = 3; }
                    
                }
                else{ 
                
                    /* Si se dejo de presionar una tecla y se esta "desacelerando", se coloca simplemente el de la 
                    dirección hacia la derecha hasta que se detiene completamente. */
                    spr = 2; 
                
                }
            
                break;
                
            }
            
            // A  la izquierda (negativo).
            case -1: {
            
                /* En el caso que la velocidad sea hacia la izquierda y no se está en el estado cero de acción (cuando no 
                se presiona tecla alguna), se controla luego segun cual fue la última tecla de movimiento horizontal que 
                se presionó para saber hacia donde "encarar" al jugador. */
                if( accion != 0 ){ 
                
                    if( last_key_h != tecla_right ){ spr = 3; }
                    else{ spr = 2; }
                    
                }
                else{ 
                
                    /* Si se dejo de presionar una tecla y se esta "desacelerando", se coloca simplemente el de la 
                    dirección hacia la izquierda hasta que se detiene completamente. */
                    spr = 3;    
                
                }
            
                break;    
                
            }
        
        }
    
    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control de sonido con otros objetos.

// En este segmento de código van los sonidso que se reproducen cuando el jugador esta cerca de un tipo de objeto


//---&gt; Sierra

    // Si el jugador está cerca se reproduce el sonido de sierra (teniendo en cuenta además que no se esté reproduciendo el mismo sonido ya).
    if( distance_to_object( parent_sierra ) &lt; 32 ){
    
        if( !audio_is_playing( sn_sierra ) ) { audio_play_sound( sn_sierra, 0, true ); }
    
    }
    else{
    
        if( audio_is_playing( sn_sierra ) ){ audio_stop_sound( sn_sierra ) }
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parent_danio">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Llamado de funciones de muerte de jugador.
{

    /* Se verifica si el objeto que se está colisionando no es del tipo "Pinche", en ese caso se realiza las acciones de muerte del jugador. Si el objeto llega a
    ser del tipo "pinche", debido a que esos objetos pueden estirarse, se debe estar colisionando un área en especifico alrededor del centro del jugador, de ser así
    se realiza la accion de muerte.*/
    if( other.object_index != ob_pinches ){
    
        if( other.activado == true){ estado_muerte_jug( xstart, ystart ); }
        
    }
    else{
    
        var colision_pinche = collision_rectangle( x - 10, y - 10, x + 10, y + 10, ob_pinches, false, false );
        
        if( colision_pinche != noone ){ estado_muerte_jug( xstart, ystart ); }
    
    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_escalera">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ayuda cuando se esta por llegar a la parte superior.

{

    /* Cuando se esta colisionando este objeto y falta poco para llegar (siendo la velocidad vertical cero o más) además de que no se esté usando 
    la escalera plataforma, se coloca el jugador encima del mismo. */
    if( vsp == 0 and en_aire == true and en_escalera == false and can_escalera == true ){
        
        // Como se van a verificar varias veces, se crean variables locales para controlarlas mejor.
        ox = other.x;
        oy = other.y;
                    
        /* Esto debe suceder siempre que el centro del jugador este sobre la parte superior de la plataforma (ayuda para los bordes en
        plataformas móviles). */
        if ( y &lt; ( oy - 4 )){
                    
            if not ( position_meeting(x, y, other ) ){
                                        
                y = oy - 16;
                                                    
                // Se comprueba si el jugador esta en un borde para posicionarlo un poco mas en el medio.
                                                            
                // Borde izquierdo
                if ( x &lt; ox ){
                                                            
                    if not ( position_meeting( x + 8, y + 16, other ) ){ x += 4; }
                                                            
                }
                else{
                                                                
                    // Borde derecho
                    if ( x &gt; ( ox + 8 ) ){
                                                                            
                        if not ( position_meeting( x - 8, y + 16, other ) ){ x -= 4; }
                                                                            
                    }
                                                            
                }
                    
            }
                        
        }
        
        
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interacción cuando se colisiona con la escalera.

{
    /* Se verifica primero si el jugador está presionando alguna tecla de movimiento vertical mientras colisiona con la escalera y que este en
    ciertos límites sin usar la caja (caso contrario de esto último, se muestra un pop-up que señala que no se puede usar por ese motivo).*/
    if( last_key_v != 0 ){
    
        if( en_escalera == false and can_escalera == true){
    
            if( con_caja == false){
    
                var ox = other.x;
            
                // Extremos a considerar que el jugador puede agarrarse de la escalera.
                if( ( x &lt;= ( ox + 36 ) and x &gt;= ( ox - 4)  ) and y &lt;= other.alto ) {
                
                    // Se toma en cuenta si el jugador está o no en el aire.        
                    if( en_aire == false ){
                    
                        var parte_inferior_escalera = position_meeting( ox + 16, y + 24, ob_plat_wall );
                    
                        /* Si no está sobre el aire se considera el caso que este en una parte media de la escalera o que este sobre la parte inferior presionando
                        la tecla "arriba" (no se considera la de abajo en ese caso para evitar problemas).*/
                        if ( ( parte_inferior_escalera == false ) or ( parte_inferior_escalera == true and last_key_v == tecla_up ) ){
                             
                            posicionamiento_escalera(false); // Función que setea las cosas base a considerar al agarrar la escalera.
                            
                            
                            
                        }
                    
                    
                    }
                    else{
                    
                        posicionamiento_escalera(false)
                    
                    }
                     
                    // Si al final se pudo colocar sobre la escalera, se cambia su sprite y estado, además de chequear sobre posible colisión con la caja.   
                    if( en_escalera == true ){
                    
                        /* Según cual fue la última tecla es la acción que se toma.*/
                        switch(last_key_v){
                                
                            case tecla_up: { 
                            
                                accion = 5; 
                                spr = 3;
                                
                                break; 
                                
                            }
                            
                            case tecla_down: { 
                            
                                accion = 6; 
                                spr = 3;
                                
                                break; 
                                
                            }
                                
                        }
                    
                        /* En el caso de que sobre la escalera hay una caja que colisione con el jugador al usarla, se verifica si la mayor parte de esa
                        caja está en los ciertos márgenes de la escalera. Si se cumple esto último se mueve en el sentido puesto que está, sino se
                        coloca al jugador por encima o por debajo de la misma dependiente la tecla */
                        if( place_meeting(x, y, ob_caja) ){
                                
                            var caja_x = ob_caja.x + 16; // Se considera el centro del caja.
                                
                            if( ( caja_x + 2 ) &lt;= ox){ 
                                    
                                ob_caja.x = ox - 32;
                                        
                            }
                            else{
                                    
                                var o_ancho_x = ox + other.sprite_width;
                                    
                                if( ( caja_x - 2 ) &gt;= o_ancho_x ){
                                        
                                    ob_caja.x = o_ancho_x;
                                        
                                }
                                else{
                                        
                                    if( last_key_v == tecla_up ){ while( place_meeting(x, y, ob_caja) ){ y--; } }
                                    else{ while( place_meeting(x, y, ob_caja) ){ y++; } }
                                        
                                }
                                    
                            } 
                                    
                        }
                    
                    }
                    
                    
                
                }
            
            }
            else{
        
                // Se muestra pop-up de que no se peude usar la escalera porque se tiene una caja.
                alarm[0] = -1;
                show_popup = 2;
                                        
                alarm[0] = 40;
        
            }
        
        }
        
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_orbe">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interacción con las orbes de luz
{

    // Se desactiva (no se destruye porque si el jugador muere, reaparece)
    with(other){
    
        effect_create_above(ef_ring, x+8, y+8, 0, c_white);
        
        agarrado = true;
        instance_deactivate_object(self);
        
    }
    
    // Se suma a las ya obtenidas
    with(control_general){ nivel_orbes_cantidad_actual++; }
    
    //[SONIDO] Se produce el correspondiente al agarrar la orbe
    
    //---&gt;  Si el pitch no supera 2, se incrementa
    if( pitch_orbe &lt; 2 ){ pitch_orbe += 0.1; }
    
    //---&gt; Se reinicia la alarma para resetear el aumento del pitc
    alarm[2] = -1;
    alarm[2] = 40;
    
    audio_sound_pitch( sn_jug_orbe, pitch_orbe );
    audio_play_sound(sn_jug_orbe, 3, false); 
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parent_plat_solido">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cuando está en plataforma horizontal móvil o vertical o contra una caja

{

    /* Dependiendo si está colisionando con una pared comun o con una caja (que hereda las propiedades de la "parent_plat_solido"), se realizan diferentes
    cosas con respecto a la colisión.*/
    if( object_get_name(other.object_index) != "ob_caja" ){
    
        // Se verifica si el jugador está o no sobre alguna plataforma móvil (o sobre una caja que esta sobre una plataforma móvil).
        if ( plat_movil_id != 0 ){
        
            // Dependiente el tipo de plataforma móvil que sea (horizontal o vertical), se realizan diferentes acciones.
            switch( plat_movil_id.tipo){
            
                // Plataforma horizontal móvil
                case 0:{
                
                    /* Al moverse con alguna plataforma horizontal móvil y "chocar" contra una plataforma plataforma sólida, el jugador lo atraviesa
                    debido al embión con el que venía de la plataforma...por lo que se "saca" al personaje en dirección contraria a la que venía.*/
                    if ( plat_movil_id.hsp != 0 ){
            
                        // Se controla si objeto con el que se está colisionando es a la derecha o a la izquierda.
                        
                        // Del lado izquierdo.
                        if( x &gt; other.x ){
                        
                            while( place_meeting(x,y, other) ){ x++; }
                        
                        }
                        else{ // Del lado derecho.
                        
                            while( place_meeting(x,y, other) ){ x--; }
                        
                        }
                    
                    
                    }
            
                    
                    
                    break;
                
                }
                
                // Plataforma vertical móvil
                case 1:{
                
                
                    // La plataforma se mueve HACIA ABAJO.
                    if( plat_movil_id.vsp &gt; 0 ){
                    
                        /* Si colisiona con el suelo, estando sobre una plataforma vertical móvil, si la mayor parte del sprite del jugador
                        está sobre la plataforma se corre al jugador al lado del suelo para que no lo atraviese y siga el movimiento con el que
                        venía. Caso contrario, se deja de mover con la plataforma y se colsa sobre el suelo.*/
                        
                        // Del lado izquierdo
                        if ( x &gt; other.x ){
                        
                            if not( position_meeting(x - 8, y + 16, other) ){
                            
                                with( other ){
                                
                                    other.x = x + 32 * image_xscale + 16;
                                
                                }
                                
                            }
                            else{
                            
                                y = other.y - 16;
                            
                                plat_movil_id.move_jug = 0;
                                plat_movil_id = 0;
                            
                            
                            }
                        
                        }
                        else{
                        
                            // Del lado derecho
                            if ( x &lt; other.x ){
                            
                                if not ( position_meeting( x + 8, y + 16, other) ){
                                
                                    with( other ){
                                    
                                        other.x = x - 16;
                                    
                                    }
                                
                                }
                                else{
                                
                                    y = other.y - 16;
                                
                                    plat_movil_id.move_jug = 0;
                                    plat_movil_id = 0;
                                
                                }
                            
                            }
                            else{
                            
                                y = other.y - 16;
                                
                                plat_movil_id.move_jug = 0;
                                plat_movil_id = 0
                            
                            }
                        
                        }
                    
                    }
                    
                    // La plataforma se mueve HACIA ARRIBA.
                    else{
                    
                        // Según donde esté el techo, el personaje se ubica en el sentido opuesto manteniendo su posición sobre la plataforma.
                        
                        // Está a la izquierda.
                        if( x &gt; other.x ){
                        
                            with(other){
                            
                                other.x = x + 32 * image_xscale + 16;
                            
                            }
                        
                        }
                        
                        //Está a la derecha.
                        else{
                        
                            with(other){
                            
                                other.x = x - 16;
                            
                            }
                        
                        }
                    
                    }
                    
                    break;
                
                }
            
            }
        
        
            /* En el caso que luego este colisionando con una caja al mover el personaje con los pasos anteriores, se la mueve el espacio necesario en la 
            dirección que se movio el jugador. */
            if( place_meeting( x, y, ob_caja ) ){
            
                // Si el jugador esta a la derecha, lo mueve a la izquierda la caja...caso contrario, lo mueve a la derecha.
                if( x &lt; ob_caja.x + 16 ){
                
                    with(ob_caja){ while(place_meeting(x, y, ob_jug ) ){ x++;} }
                
                }
                else{
                
                    with(ob_caja){ while(place_meeting(x, y, ob_jug ) ){ x--;} }
                    
                }
            
            }
        
        }
        
        // Cuando no está sobre una plataforma móvil.
        else{
        
            /* Se verifica que por debajo del jugador haya un suelo sólido y, de ser asì, si hay una caja...en este último caso se controla si el jugador
            está arriba o abajo para posicionarlo correctamente en el caso que se sobrepongan debido a que el mismo sea movido por una plataforma móvil.*/
            if ( position_meeting( x, y + sprite_height + 1, parent_plat_solido ) ){
            
                // Se controla que se esté sobrepuesto a una caja.
                if( place_meeting( x, y, ob_caja) ){
                
                    if( y &lt; ob_caja.y ){
                    
                        y = ( ob_caja.y - 16 ); 
                    
                    }
                    else{
                    
                        with(ob_caja){
                        
                            other.y = ( y + sprite_height + 16 ); 
                        
                        }
                    
                    }
                
                }
            
            }
            
            
            // Se coloca a la derecha o a la izquierda del objeto con el que este colisionando para dejarlo justo al lado.
            if ( x &lt; other.x ){
            
                while( place_meeting( x, y, other ) ){ x -= 0.5; }
            
            }
            else{
            
                while( place_meeting( x, y, other) ) { x += 0.5; }
            
            }
        
        }
                            
    
    }
    
    // En el caso que la colisón sea sólo sobre una caja.
    else{
    
        /* Se verifica si el jugador esta queriendo bajar de una "cloud platform", si no es así (que puede aún realizar dicha acción), se realizan los
        actos de colisión normales, caso contrario se corre la caja a un lado dependiendo donde se ubica el jugador con respecto a la misma para que 
        pueda bajar sin problemas.*/
        if ( can_bajar_plat == true ){
        
            // Variables locales para tener mayor control sobre el objeto que se está colisionando.
            var xo, yo, large;
            x_other = other.x;
            y_other = other.y;
            large_other = other.sprite_width; // El sprite de la caja tiene las mismas dimensiones de alto como de ancho.
    
        
            /* Si la caja esta justo debajo del jugador, se lo mueve hacia arriba hasta que deje de colisionar...caso contario, la caja está por encima y 
            se lo mueve hacia ese sentido (estos casos ocurren cuando la caja está moviéndose sobre una plataforma móvil).*/
            if( y &lt; y_other and en_aire == false ) {
                
                while(place_meeting(x,y,other) ){ y -= 0.5; }
            
            }
            else{
            
                if ( y  &gt; ( y_other + large_other ) and en_aire == false){
                
                    if ( vsp &lt;= 0 ){ vsp = 0.5; }
                    while( place_meeting(x,y, other) ){ y += 0.5; }
            
                }
                else{
                
                    /* En el caso que no sea ninguno de los anteriores, se coloca el jugador al lado de la caja dependiendo en que dirección con respecto a la
                    misma se encuentra. */
                    
                    // Del lado izquierdo
                    if ( x &lt; ( x_other + 16 ) ){
                    
                        /* Se controla que en el espacio que se piensa correr al jugar, no haya una pared sólida, caso contrario se lo coloca abajo y 
                        se quita su velocidad vertical (debido a que es lo más probable que el jugador colisionara desde abajo).
                        */
                        if not ( place_meeting( x_other - 16, y - 5, parent_plat_solido ) ){
                        
                            x = x_other - 10;
                            
                        }
                        else{
                        
                            y = y_other + large_other + 10;
                            vsp = 0;
                        
                        }
                    
                    }
                    else{ // Del lado derecho
                    
                        if not ( place_meeting( x_other + large_other + 16, y - 5, parent_plat_solido) ){
                        
                            x = x_other + large_other + 10;
                            
                        }
                        else{
                    
                            y = y_other + large_other + 10;
                            vsp = 0;
                        
                        }
                    
                    }
                
                }
            }
        
        }
        else{
        
            // Si la caja se encuentra a la izquierda del jugador, se corre hacia ese lado.
            if ( x &gt; ( other.x + 16 ) ){ 
            
                with(other){ 
                
                    while(place_meeting(x,y,other) ){ x -= 0.5; } 
                    
                } 
                
            }
            else{ // Si la caja está a la dercha del jugador, se corre hacia ese lado.
            
                with(other){ 
            
                    while(place_meeting(x,y,other) ){ x += 0.5; } 
                
                } 
                
            }
        
        }
    
    }

   

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parent_plat_cloud">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ayuda cuando se esta por llegar

{
    /* Cuando se esta colisionando este objeto y falta poco para llegar (siendo la velocidad vertical cero o más) además de que no se esté bajando de la
    plataforma, se coloca el jugador encima del mismo. */
    if( vsp == 0 ){
    
        if( can_bajar_plat == true  ){
    
            if ( en_aire == true ){
            
                // Como se van a verificar varias veces, se crean variables locales para controlarlas mejor.
                ox = other.x;
                oy = other.y;
                
                /* Esto debe suceder siempre que el centro del jugador este sobre la parte superior de la plataforma (ayuda para los bordes en
                plataformas móviles). */
                if ( y &lt; ( oy - 4 )){
                
                    if not ( position_meeting(x, y, other ) ){
                            
                        y = oy - 16;
                                
                        // Se comprueba si el jugador esta en un borde para posicionarlo un poco mas en el medio.
                                        
                        // Borde izquierdo
                        if ( x &lt; ox ){
                                        
                            if not ( position_meeting( x + 8, y + 16, other ) ){ x += 4; }
                                        
                        }
                        else{
                                            
                            // Borde derecho
                            if ( x &gt; ( ox + 8 ) ){
                                                
                                if not ( position_meeting( x - 8, y + 16, other ) ){ x -= 4; }
                                                
                            }
                                        
                        }
                    }
                    
                }
                
            }
            
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Correcciones con plataformas moviles verticales.

if( object_is_ancestor(other.object_index, parent_plat_movil) ){
    
    /* Esto se hace utilizando la variable "move_jug" de la plataforma móvil, en el caso que tenga asignado el ID del jugador 
    (cuando es distinto de cero), se coloca encima de la plataforma. Esto es para hacer una "leve correción" cuando la plataforma
    se esta deteniendo y el jugador queda un poco "encimado" sobre la misma, haciendo que la atraviesa como si no tuviera nada
    por debajo.*/
    with(other){
        
        if( move_jug != 0 ){
            
            if not ( place_meeting(x, y + 2, ob_plat_wall) ){
            
                other.y = y - 16;
            
            }
            
        }
        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control de los sprites del jugador.


    /* La cantidad de sub-imagenes se setea según si el jugador esta en la escalera ( 2 sub-imagenes) o no (4 sub-imagenes).*/
    if( en_escalera == false ){ 
    
        sprite_index = sp_jug_mov; 
        
        // Esto se controla aca porque no puede subir una escalera con una caja, se cambia la máscara de colisión dependiendo si el jugador la tiene.
        if ( con_caja == false ){ mask_index = sp_jug_mov }
        else{ mask_index = sp_mask_con_caja; }
    
    }
    else{ sprite_index = sp_jug_esc_mov; }

    
    
    // Se setea la velocidad de la animación de los sprite.
    if( spr &gt; 1 ){ image_speed = 0.25; }
    else{ image_speed = 0.10; }
    
    // Se controla si se está o no usando una escalera (según ese estado, son los sprites a usar).
    if (en_escalera == false ){
    
        // Se verifica si el jugador esta haciendo animación final del nivel.
        if( spr &lt; 4 ){
        
             // Si no está en el aire el jugador, se maneja normalmente...caso contrario, se cambia el sprite dependiendo si esta subiendo o bajando y donde esta mirando.
            if( en_aire == false ){
            
                // Se comprueba si el jugador tiene o no la caja (para usar el sprite correspondiente.
                if( con_caja == false ){
                
                    // Se varia según el valor actual del atributo "spr":
                    switch(spr){
                
                        // Quieto
                    
                            // Derecha
                            case 0: { draw_sprite_ext(sp_jug_quieto, -1, x, y, 1, 1, 0, c_white, 1); break;}
                            // Izquierda
                            case 1: { draw_sprite_ext(sp_jug_quieto, -1, x, y, -1, 1, 0, c_white, 1); break; }
                        
                        // Moviéndose
                    
                            // Derecha
                            case 2: { draw_sprite_ext(sp_jug_mov, -1, x, y, 1, 1, 0, c_white, 1); break; }
                            // Izquierda
                            case 3: { draw_sprite_ext(sp_jug_mov, -1, x, y, -1, 1, 0, c_white, 1); break; }
                            
                
                    }
                
                }
                else{
                
                    
                    // Se varia según el valor actual del atributo "spr":
                    switch(spr){
                
                        // Quieto
                    
                            // Derecha
                            case 0: { draw_sprite_ext(sp_jug_caja_quieto, -1, x, y, 1, 1, 0, c_white, 1); break;}
                            // Izquierda
                            case 1: { draw_sprite_ext(sp_jug_caja_quieto, -1, x, y, -1, 1, 0, c_white, 1); break; }
                        
                        // Moviéndose
                    
                            // Derecha
                            case 2: { draw_sprite_ext(sp_jug_caja_mov, -1, x, y, 1, 1, 0, c_white, 1); break; }
                            // Izquierda
                            case 3: { draw_sprite_ext(sp_jug_caja_mov, -1, x, y, -1, 1, 0, c_white, 1); break; }
                            
                
                    }
                
                }
                
            }
            else{
            
                // Se comprueba si el jugador tiene o no la caja (para usar el sprite correspondiente.
                if( con_caja == false ){
                
                    // Se verifica si esta subiendo o bajando
                    if( sign(vsp) &lt; 0 ){
                
                        // Derecha ( mirando == 0 ) / Izquierda ( mirando == 1 )
                        if( mirando == 0 ){ draw_sprite_ext(sp_jug_aire, 0, x, y, 1, 1, 0, c_white, image_alpha); }
                        else{ draw_sprite_ext(sp_jug_aire, 0, x, y, -1, 1, 0, c_white, image_alpha); }
                
                    }
                    else{
                
                        // Derecha ( mirando == 0 ) / Izquierda ( mirando == 1 )
                        if( mirando == 0 ){ draw_sprite_ext(sp_jug_aire, 1, x, y, 1, 1, 0, c_white, image_alpha); }
                        else{ draw_sprite_ext(sp_jug_aire, 1, x, y, -1, 1, 0, c_white, image_alpha); }
                
                    }
                
                }
                else{
                
                    // Se verifica si esta subiendo o bajando
                    if( sign(vsp) &lt; 0 ){
                
                        // Derecha ( mirando == 0 ) / Izquierda ( mirando == 1 )
                        if( mirando == 0 ){ draw_sprite_ext(sp_jug_caja_aire, 0, x, y, 1, 1, 0, c_white, image_alpha); }
                        else{ draw_sprite_ext(sp_jug_caja_aire, 0, x, y, -1, 1, 0, c_white, image_alpha); }
                
                    }
                    else{
                
                        // Derecha ( mirando == 0 ) / Izquierda ( mirando == 1 )
                        if( mirando == 0 ){ draw_sprite_ext(sp_jug_caja_aire, 1, x, y, 1, 1, 0, c_white, image_alpha); }
                        else{ draw_sprite_ext(sp_jug_caja_aire, 1, x, y, -1, 1, 0, c_white, image_alpha); }
                
                    }
                
                }
            
            }
        
        }
        else{
        
             // Se varia según el valor actual del atributo "spr":
            switch(spr){
            
                // Terminando nivel.
                
                    // Festejando (antes de entrar en cueva)
                    case 4: { 
                    
                        if( en_aire == false ){ draw_sprite_ext(sp_jug_festejo, 0, x, y, 1, 1, 0, c_white, image_alpha); }
                        else{ draw_sprite_ext(sp_jug_festejo, 1, x, y, 1, 1, 0, c_white, image_alpha); }
                        
                        break; 
                    }
                    
                    // Entrando a la cueva
                    case 5: { draw_sprite_ext(sp_jug_entrando_tunel, -1, x, y, 1, 1, 0, c_white, image_alpha); break; }
                    
                    // Dejando la bandera animado
                    case 6: { draw_sprite_ext(sp_jug_dejar_bandera, -1, x, y, 1, 1, 0, c_white, image_alpha); break; }
                    
                    // Dejando la bandera quieto
                    case 7: { draw_sprite_ext(sp_jug_dejar_bandera, 0, x, y, 1, 1, 0, c_white, image_alpha); break; }
                    
            }
                    
        }
    
    }
    else{
    
        // Se varia según el valor actual del atributo "spr":
        switch(spr){
        
            // Quieto
            
                // Mirando enfrente
                case 0: { draw_sprite_ext(sp_jug_esc_quieto, 0, x, y, 1, 1, 0, c_white, 1); break; }
                
                // Mirando a la izquierda.
                case 1: { draw_sprite_ext(sp_jug_esc_quieto, 1, x, y, -1, 1, 0, c_white, 1); break; }
                
                // Mirando a la derecha.
                case 2: { draw_sprite_ext(sp_jug_esc_quieto, 1, x, y, 1, 1, 0, c_white, 1); break; }
                
                // Moviéndose hacia arriba o abajo.
                case 3: { draw_sprite_ext(sp_jug_esc_mov, -1, x, y, 1, 1, 0, c_white, 1); break; }
                
        
        }
    
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manejo de los pop-up
{

    //Según en que estado se encuentre la variable "show_popup", se muestra el la imagén correspondiente (el cero no se cuenta ya que no se dibuja nada).
    
    if( show_popup != 0 ){
    
    
        if( show_popup != 4 ){
    
            draw_sprite(sp_popup, show_popup - 1, x, y - 18);
            
            if( show_popup == 1 ){ 
            
                image_speed = 0.2;
                draw_sprite_stretched( sprite_tecla_interac, -1, x - 8, y - 40, 18, 16  );
                
            }
        
        }
        else{
        
            draw_sprite(sp_popup, 0, x, y - 18);
            
            image_speed = 0.2;
            draw_sprite_stretched( sprite_tecla_up, -1, x - 8, y - 40, 18, 16  );
        
        }
    
    }
    
    /*
    
        NOTA:
        
            1 = Pop-up de interacción (caja, palanca, etcétera).
            2 = Pop-up que señala que no se puede dejar una caja en el lugar deseado.
            3 = Pop-up que señala que se necesita la caja para poder avanzar.
            4 = Pop-up de hacer hacia arriba.
            
    */
   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
