<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<timeline>
  <entry>
    <step>0</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Iniciar animación final (posición 5)

spr = 4; 

timeline_position = 5; // Se va a la posición del timeline donde comienza a saltar y festejar.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>1</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Iniciar animación dejar caja (posición 100)


timeline_position = 100; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>2</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Iniciar animación dejar bandera (posición 140)
timeline_position = 140;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>5</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manejo de música de festejo

// Se baja la música de fondo 
with(control_general){ audio_sound_gain(musica_principal, 0, 0); }

// Se reproduce la música de festejo (si el estado del punto de entrega no ha cambiado)
if( ob_punto_entrega.estado == 0 ){
 
    var musica_festejo = audio_play_sound(music_final_nivel_no_caja, 0, false);
    audio_sound_gain(musica_festejo, volumen_musica, 0); 

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>10</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se realiza un salto pequeño.

can_jump = false;
en_aire = true; 
still_jump = false;

vsp = vel_salto;

//[SONIDO] Se preoduce el correspondiente al salto
audio_play_sound(sn_jug_salto, 2, false); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>30</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se realiza un salto pequeño.

can_jump = false;
en_aire = true; 
still_jump = false;

vsp = vel_salto;

//[SONIDO] Se preoduce el correspondiente al salto
audio_play_sound(sn_jug_salto, 2, false); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>48</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cambio de sprite  - Inicio de música de conteo

with( control_general ){ path_clear_points(pth_jug_fin_nivel); } // Se limpia cualquier punto que haya en este path anteriormente.

spr = 5;

// Comienza a sonar la música de conteo
with(control_general){

    musica_secundaria = audio_play_sound(music_conteo_orbes, 1, true);
    audio_sound_gain( musica_secundaria, 0, 0);
    audio_sound_gain( musica_secundaria, volumen_musica, 1000);

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>50</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fade out del jugador / Se crea el contador de orbes

// Se va desapareciendo el jugador y se vuelve cada step a una posicion anterior del timeline, si desaparece se detiene el timeline.
if( image_alpha &gt; 0 ){

    image_alpha -= 0.05;
    timeline_position--;;

}
else{

    timeline_running = false;
    instance_create(room_centro_x, room_centro_y, control_conteo_orbes);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>55</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transición

// Se verifica si el nivel ha sido rehecho, caso que no haya sido asi (false) se continua con el siguiente, sino se vuelve a la seleccion de niveles.
if( control_conteo_orbes.nivel_rehecho == false ){

    // Se verifica a que room ir dependiendo en que nivel esta (común, final o extra)
    switch( nivel_actual ){
    
        // Se está en nivel final
        case 10: {    
        
            // En el caso de no estar en el sector final, se va al primer nivel sel siguiente sector....caso contrario, se va a la selección de niveles.
            if( sector_actual != 6 and sector_actual != 5){
                    
                var index_room_ir = asset_get_index( "nivel_" + string( 1 + 10 * sector_actual  ) );
               
                transicion( index_room_ir, 0, 2 );  
            }
            else{ 
            
                transicion( room_seleccion_niveles, 0, 2 ); 
                
            }
            
            break;
        
        }
    
        // Se está en nivel extra    
        case 11:{

            // Si está en el último nivel del juego se lleva a la cutscene final, caso contrario se verifica otra situación particular
            if( sector_actual == 6 ){ transicion( room_final, 0, 1 ); }
            else{
            
                // Se considera la posibilidad que justo junta las ruedas necesarias para desbloquear el sector extra.    
                if( control_general.juego_total_ruedas == 165 and verificar_desbloqueo( "save.data", datos[0], 1, 6 ) == false ){ transicion( room_seleccion_sectores, 0, 2 ); control_general.cantidad_opciones = 6; }
                else{ transicion( room_seleccion_niveles, 0, 2 ); }
                
            }
            
            break;
        
        }
        
        // Niveles comunes.
        default:{
        
            // Se realiza una transición al siguiente nivel (en el caso que no exista, se vuelve al primero de todos, esto es usado en los testeos).
            if( room_next(room) != -1 ){ 
            
                transicion( room_next(room), 0, 2 ); 
                
            }
            else{ 
            
                transicion( nivel_1, 0, 1 ); 
                nivel_actual = 1;
                timeline_running = false;
                
            }
        
        
            break;
        
        }
        
    }

}
else{ 

    
    if( sector_actual == 6 and nivel_actual == 11 ){ transicion( room_final, 0, 1 ); }
    else{
        
        // Se considera el caso de que haya junto todas las orbes para desbloquear el sector extra.
        if( control_general.juego_total_ruedas == 165 and verificar_desbloqueo( "save.data", control_general.datos[0], 1, 6 ) == false ){ transicion( room_seleccion_sectores, 0, 2 ); control_menu_pausa.cantidad_opciones = 6; } 
        else{ transicion( room_seleccion_niveles, 0, 2 ); }
    
    }
    
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se vuelve al volumen normal la música de fondo


/* Se vuelve a la misma música en el caso que el room actual no sea uno de los finales de sector (en ese caso el cambio se hace al iniciar el room con el 
control_general)...en ambos casos se reduce hasta sacarse la música de conteo de orbes. */
if not ( string_count("final", room_get_name(room) ) ){
   
   with(control_general){ 
   
    audio_sound_gain(musica_secundaria, 0, 1000);
    audio_sound_gain(musica_principal, volumen_musica, 3000); 
    
   }

}
else{

    with(control_general){ audio_sound_gain(musica_secundaria, 0, 2000); }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>60</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Incremento de nivel_actual y se detiene timeline

// En el caso que el siguiente nivel estaba bloqueado, se aumenta el "nivel_actual", caso contrario se obvia esa parte.
if( control_conteo_orbes.nivel_rehecho == false ){

    // Se verifica si se pasó de pasó de sector.
    if( nivel_actual != 10 ){ nivel_actual++; }
    else{ 
    
        // Se vuelve al primer nivel pero del siguiente sector en el caso de no estar en el sector final del juego.
        if( sector_actual != 6 and sector_actual != 5 ){
        
            nivel_actual = 1;
            sector_actual++;
            control_menu_pausa.aux_sector_actual = sector_actual;
     
        }
           
    }
    
    control_menu_pausa.alarm[4] = 50; // Se llama a la alarma que activa la pausa.

}


timeline_running = false;  // Se detiene el timeline 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>110</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se deja la caja a la derecha

dejar_caja(1, 32, 20); // Función para señalar donde se deja la caja.
with( ob_punto_entrega ){ estado = 1; }

// Se destruye debido a que el mismo no se va a usar mas (se visualiza con un sprite en el sprite del punto de entrega).
with(ob_caja){ instance_destroy(); }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>120</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Comienza a ir a la cueva.

spr = 3; // Se señala que el sprite sea el que se mueve a la izquierda

// Con el objeto de punto de entrega, se inicializa el path a usar y valores usados.
with( ob_punto_entrega ){

    var pth_temp_final = control_general.pth_jug_fin_nivel;

    path_add_point( pth_temp_final, centro_puerta_x, ob_jug.y, 100); // Se añane la puerta de la entrada al tunel.
    path_delete_point( pth_temp_final, 0 ); // Se borra el primer punto (que es donde comenzo a moverse antes de dejar la caja.
    
    with( ob_jug ){ path_start( pth_temp_final, 2, 0, false); } // Se inicia el path al jugador.
    
    // Se señala que ya no hace falta que considere el hecho de dejar la caja y que se prepare para evaluar cuando termina el movimiento del path.
    ob_punto_entrega.caja_entregar = false;
    fin_nivel = 1;

}

timeline_running = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>140</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animación de dejar la bandera (sin guiño)
spr = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>150</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animación de dejar la bandera (con guiño)
spr = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>155</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animación de dejar la bandera (sin guiño)
spr = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>170</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Se señala que se dejó la bandera y se entra a la cueva.

spr = 4;
with( ob_punto_entrega ){

    // Se señala que ya se dejo la bandera y que comience a entrar en la cueva.
    estado = 2;
    fin_nivel = 3;

}

timeline_position = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
</timeline>
